searchState.loadedDescShard("ed25519", 0, "RustCrypto: Ed25519\nSize of an encoded Ed25519 signature in bytes.\nSize of an <code>R</code> or <code>s</code> component of an Ed25519 signature when …\nSignature errors.\nByte representation of a signature.\nEd25519 signature.\nEd25519 signature serialized as a byte array.\nSupport for decoding/encoding signatures as bytes.\nGet the length of this signature when encoded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nParse an Ed25519 signature from a byte slice.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nPKCS#8 private key support.\nBytes for the <code>R</code> component of a signature.\nBytes for the <code>s</code> component of a signature.\nEncode signature as its byte representation.\nReturn the inner byte array.\nEncode signature as a byte vector.\nConvert this signature into a byte vector.\nEd25519 Algorithm Identifier.\nAlgorithm <code>ObjectIdentifier</code> for the Ed25519 digital …\nASN.1 DER-related errors.\nASN.1 <code>BIT STRING</code> type.\nParse a private key object from a PKCS#8 encoded document.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nSerialize a private key object to a PKCS#8 encoded …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a PKCS#8 document.\nEd25519 keypair serialized as bytes.\nMaximum size of a BER/DER-encoded OID in bytes.\nMaximum number of unused bits allowed.\nObject identifier (OID).\nContains the success value\n<code>AlgorithmIdentifier::parameters</code> is malformed or otherwise …\nPKCS#8 <code>PrivateKeyInfo</code>.\nPublic key errors propagated from the <code>spki::Error</code> type.\nEd25519 public key serialized as bytes.\nResult type\nSecret <code>Document</code> type.\nX.509 <code>AlgorithmIdentifier</code> for the private key type.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nBorrow the inner byte slice.\nGet the ASN.1 DER-encoded bytes of this document.\nBorrow the inner serialized bytes of this document.\nGet the length of this <code>BIT STRING</code> in bits.\nIterator over the bits of this <code>BIT STRING</code>.\nGet the number of bytes/octets needed to represent this …\nTry to decode the inner ASN.1 DER message contained in this\nTry to decode the inner ASN.1 DER message as the given …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode the provided type as ASN.1 DER, storing the …\nEncode the provided type as ASN.1 DER.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse raw keypair from a 64-byte input.\nParse an OID from from its BER/DER encoding.\nCreate a new ASN.1 <code>BIT STRING</code> from the given bytes.\nDecode ASN.1 DER document from PEM.\nDecode ASN.1 DER document from PEM.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize object from ASN.1 DER-encoded […\nDeserialize PEM-encoded [<code>SubjectPublicKeyInfo</code>].\nIs the number of unused bits a value other than 0?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>SecretDocument</code>.\nConvert to an ASN.1 DER-encoded byte vector.\nIs the inner byte slice empty?\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nGet the length of the encoded ASN.1 DER in bytes.\nGet the length of the encoded ASN.1 DER in bytes.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nCreate a new PKCS#8 <code>PrivateKeyInfo</code> message.\nCreate a new ASN.1 <code>BIT STRING</code> from a byte slice.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nGet the parent OID of this one (if applicable).\nPrivate key data.\nEd25519 public key (if available).\nPublic key data, optionally available if version is V2.\nPush an additional arc onto this OID, returning the child …\nBorrow the raw bytes of this <code>BIT STRING</code>.\nRead ASN.1 DER document from a file.\nRead ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nLoad PKCS#8 private key from an ASN.1 DER-encoded file on …\nLoad PKCS#8 private key from a PEM-encoded file on the …\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from a PEM-encoded file on the …\nEd25519 secret key.\nSerialize as a 64-byte keypair.\nReturns the raw bytes of the public key.\nReturn an allocated ASN.1 DER serialization as a byte …\nEncode ASN.1 DER document as a PEM string with …\nEncode ASN.1 DER document as a PEM string.\nSerialize a <code>SecretDocument</code> containing a PKCS#8-encoded …\nSerialize this private key as PEM-encoded PKCS#8 with the …\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nSerialize this public key as PEM-encoded SPKI with the …\nReturn an ASN.1 DER-encoded byte vector.\nGet the number of unused bits in this byte slice.\nGet the PKCS#8 <code>Version</code> for this structure.\nWrite ASN.1 DER document to a file.\nWrite ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path")