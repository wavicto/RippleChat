searchState.loadedDescShard("n0_watcher", 0, "Watchable values.\nThe immediate, direct observer of a <code>Watchable</code> value.\nThe error for when a <code>Watcher</code> is disconnected from its …\nFuture returning the current or next value that’s <code>Some</code> …\nCombinator to join two watchers\nWraps a <code>Watcher</code> to allow observing a derived value.\nFuture returning the next item after the current one in a …\nAbstracts over <code>Option&lt;T&gt;</code> and <code>Vec&lt;T&gt;</code>\nA stream for a <code>Watcher</code>’s next values.\nThe type of value that can change.\nA wrapper around a value that notifies <code>Watcher</code>s when the …\nA handle to a value that’s represented by one or more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current state of the underlying value, or …\nReturns the currently stored value.\nReturns a future completing once the value is set to <code>Some</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this value into an <code>Option</code>.\nMaps this watcher with a function that transforms the …\nCreates a <code>Watchable</code> initialized to given value.\nJoins a set of watchers into a single watcher\nReturns a watcher that updates every time this or the …\nPolls for the next value, or returns <code>Disconnected</code> if one …\nSets a new value.\nReturns a stream which will yield the most recent values …\nReturns a stream which will yield the most recent values …\nReturns a future completing with <code>Ok(value)</code> once a new …\nCreates a <code>Direct</code> <code>Watcher</code>, allowing the value to be …")