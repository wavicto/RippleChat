searchState.loadedDescShard("xmltree", 0, "A simple library for parsing an XML file into an in-memory …\nThis library is unable to process this XML. This can occur …\nDocument declaration has already been written to the …\nRepresents an XML element.\nA predicate for matching elements.\nEmitter configuration structure.\nThe name of the last opening element is not equal to the …\nEnd element name is not specified when it is needed, for …\nAn error which may be returned by <code>XmlWriter</code> when writing …\nAn I/O error occured in the underlying <code>Write</code> instance.\nThe name of the last opening element is not available.\nThe XML is invalid\nNamespace is a map from prefixes to namespace URIs.\nErrors that can occur parsing XML\nThe Element attributes\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to automatically insert leading and …\nBorrowed namespace for the writer\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to emit CDATA events as plain characters. …\nChildren\nChecks whether this namespace mapping contains the given …\nCreates an XML writer with this configuration.\nReturns an empty namespace.\nPuts a mapping into this namespace forcefully.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries the namespace for the given prefix.\nFind a child element with the given name and return a …\nFind a child element with the given name and return a …\nReturns the inner text/cdata of this element, if any.\nSee <code>ParserConfig</code> fields docs for details\nA string which will be used for a single level of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this namespace is empty.\nChecks whether this namespace is essentially empty, that …\nNamespace mappings contained in a namespace.\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to keep element names to support <code>EndElement</code> …\nSee <code>ParserConfig</code> fields docs for details\nLine separator used to separate lines in formatted output. …\nThe name of the Element.  Does not include any namespace …\nThis elements namespace, if any\nThe full list of namespaces, if any\nCreate a new empty element with given name\nCreates an emitter configuration with default values.\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to convert elements with empty content to …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to automatically insert spaces before the …\nParses some data into an Element\nParses some data into a list of <code>XMLNode</code>s\nWhether or not characters in output events will be …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not the emitted document should be indented. …\nThis elements prefix, if any\nPuts a mapping into this namespace.\nFind a child element with the given name, remove and …\nWrites out this element as the root element in an new XML …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to write XML document declaration at the …\nWrites out this element as the root element in a new XML …")