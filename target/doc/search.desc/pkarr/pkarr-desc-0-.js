searchState.loadedDescShard("pkarr", 0, "Pkarr\nA trait for a SignedPackets cache for Pkarr Client.\nThe sha1 hash of the crate::PublicKey used as the key in …\nPkarr client for publishing and resolving SignedPackets …\nA blocking (synchronous) version of Client.\nA builder for constructing a <code>Client</code> with custom …\nDefault cache size: 1000\nDefault maximum TTL: 24 hours.\nDefault minimum TTL: 5 minutes.\nDefault Relays.\nA thread safe wrapper around lru::LruCache\nEd25519 keypair to sign dns Packets.\nMaximum legal size of the binary representation of a …\nEd25519 public key to verify a signature over dns Packets.\nSigned DNS packet\nA builder for SignedPacket with many convenient methods, …\nStrictly monotonic timestamp since SystemTime::UNIX_EPOCH …\nInsert an <code>A</code> record.\nInsert an <code>AAAA</code> record.\nInsert an <code>A</code> or <code>AAAA</code> record.\nReturns all resource records in this packet\nReturns a blocking (synchronous ) version of Client.\nReturn a reference to the underlying [u8; 32] bytes.\nReturns the serialized signed packet: …\nReturns the SignedPacket as a bytes slice with the format: …\nReturn the internal <code>u64</code> representation of this Timestamp.\nTry building a Client with the configuration in this …\nAlias to Self::sign\nReturns a builder to edit config before creating Client.\nCreate a SignedPacket using a builder.\nReturns a reference to the internal cache.\nSet a custom implementation of Cache.\nReturns a reference to the internal cache.\nSet the size of the capacity of the Self::cache …\nReturns the maximum capacity of SignedPackets allowed in …\nReturns the maximum capacity of SignedPackets allowed in …\nInsert a <code>CNAME</code> record.\nDeserialize SignedPacket from a serialized version for …\nDeserialize a SignedPacket from persistent storage.\nTime since the Self::last_seen in seconds\nReturns the DNS Packet compressed and encoded.\nExported errors\ncalculates the remaining seconds by comparing the Self::ttl…\nExtra features that might benefit most but not all …\nExtend the current Self::relays with extra relays.\nSimilar to resource_records, but filters out expired …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a SignedPacket from a PublicKey and the relays …\nCreates a <code>Keypair</code> from a given <code>SecretKey</code>.\nConvert the TLD in a <code>&amp;str</code> to a PublicKey.\nReads SignedPacket from cache, while moving it to the head …\nReads SignedPacket from cache, without changing the LRU …\nReads SignedPacket from cache, without changing the LRU …\nInsert an <code>HTTPS</code> record\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this cache is empty.\nReturns true if this cache is empty.\nReturns whether or not this packet is considered expired …\nReturns true if both packets have the same timestamp and …\nUnix last_seen time in microseconds\nReturns the number of SignedPackets in this cache.\nSet the maximum TTL value.\nSet the minimum TTL value.\nReturn whether this SignedPacket is more recent than the …\nCreates a new <code>LRU</code> cache that holds at most <code>cap</code> items.\nCreates a new SignedPacket from a Keypair and …\nSimilar to crates <code>no-default-features</code>, this method will …\nDisable relays, and use the Dht only.\nDisable relays, and use the Dht only.\nGenerate a Timestamp from the DEFAULT_FACTORY.\nReturns the PublicKey of this <code>Keypair</code>.\nReturns the PublicKey of the signer of this SignedPacket\nPublishes a SignedPacket to the [mainline] Dht and or …\nPublishes a SignedPacket to the [mainline] Dht and or …\nPuts SignedPacket into cache.\nPuts SignedPacket, if a version of the  packet already …\nGenerates a new random <code>Keypair</code> using the operating system…\nInsert any type of RData\nInsert a ResourceRecord\nSet the Self::last_seen to the current system time\nSet custom set of Relays.\nSet the maximum request timeout for both Dht and relays …\nReturns a SignedPacket from the cache even if it is …\nReturns a SignedPacket from the cache even if it is …\nReturns the most recent SignedPacket found after querying …\nReturns the most recent SignedPacket found after querying …\nReturn and iterator over the ResourceRecords in the …\nReturns the secret part of this <code>Keypair</code>.\nSerialize a SignedPacket for persistent storage.\nReturns a serialized representation of this SignedPacket …\nSet the Self::last_seen property\nSigns a message with the private key of this <code>Keypair</code>.\nCreate a Packet from the ResourceRecords inserted so far …\nReturns the Signature of the the bencoded sequence number …\nInsert an `SVCB record\nAdd a custom Timestamp.\nReturns the timestamp in microseconds since the UNIX_EPOCH.\nReturn big endian bytes representation of this timestamp.\nReturn a the underlying [u8; 32] bytes.\nReturns a slice of the serialized SignedPacket omitting …\nConverts the public key of this <code>Keypair</code> to a URI string.\nFormat the public key as <code>pk:</code> URI string.\nConverts the public key of this <code>Keypair</code> to a z-base32 …\nFormat the public key as z-base32 string.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the smallest <code>ttl</code> in the resource records, calmped …\nInsert a <code>TXT</code> record.\nVerifies a message against a given signature using this …\nVerify a signature over a message.\nReturn a reference to the underlying VerifyingKey\nMost relays responded with bad request\nErrors occurring during building a Client\nCompare and swap failed; there is a more recent …\nA different SignedPacket is being concurrently published …\nErrors that requires resolving most recent SignedPacket …\nA different SignedPacket is being concurrently published …\nFailed to build the Dht client.\nPublishing SignedPacket to Mainline failed, received an …\nTransparent simple_dns::SimpleDnsError\nPassed an empty list of relays\nFailed to write encoded DNS packet due to I/O error\nCannot decompress Edwards point\nInvalid PublicKey encoding\nInvalid PublicKey length.\nSerialized signed packets are …\nPublishing SignedPacket to Mainline failed.\nClient configured without Mainline node or relays.\nFound a more recent SignedPacket in the client’s cache\nDNS packet endocded and compressed is larger than 1000 …\nDNS packet endocded and compressed is larger than 1000 …\nErrors while trying to create a PublicKey\nErrors while trying to create a PublicKey\nErrors occurring during publishing a SignedPacket\nErrors that requires either a retry or debugging the …\nErrors that requires either a retry or debugging the …\nErrors which may occur while processing signatures and …\nErrors trying to create a new SignedPacket\nErrors trying to parse or create a SignedPacket\nPublish query timed out with no responses neither success …\nAll relays responded with unexpected responses, check …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.")