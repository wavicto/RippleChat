searchState.loadedDescShard("surge_ping", 0, "If you want to pass the <code>Client</code> in the task, please wrap it …\nConfig is the packaging of various configurations of …\nRepresents the ICMP reply packet.\nPacket structure returned by ICMPv4.\nPacket structure returned by ICMPv6.\nA Ping struct represents the state of one particular ping …\nAn error resulting from a ping option-setting or …\nAn ICMPv4 packet abstraction.\nAn ICMPv6 packet abstraction.\nBinds this socket to the specified address.\nDecode into icmp packet from the socket message.\nDecode into icmpv6 packet from the socket message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the destination field.\nGet the destination IPv6 address.\nGet the icmp_code of the icmpv4 packet.\nGet the icmp_type of the icmpv4 packet.\nGet the icmpv6_code of the icmpv6 packet.\nGet the icmpv6_type of the icmpv6 packet.\nGet the identifier of the icmp_v4 packet.\nGet the identifier of the icmp_v6 packet.\nGet the hop_limit field.\nIf it is an <code>echo_reply</code> packet, it is the source address in …\nIf it is an <code>echo_reply</code> packet, it is the source address in …\nGet the sequence of the icmp_v4 packet.\nGet the sequence of the icmp_v6 packet.\nGet the size of the icmp_v4 packet.\nGet the size of the icmp_v6 packet.\nExpose the underlying socket, if user wants to modify any …\nGet the source field.\nGet the source IPv6 address.\nGet the ttl field.\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentify which ICMP the socket handles.(default: ICMP::V4)\nA client is generated according to the configuration. In …\nA structure that can be specially configured for socket.\nShortcut method to ping address. <strong>NOTE</strong>: This function …\nSend Ping request with sequence number.\nCreate a <code>Pinger</code> instance, you can make special …\nSend a ping packet (useful, when you don’t need a reply).\nTry to open the socket with provided at first (DGRAM or …\nThe timeout of each Ping, in seconds. (default: 2s)\nSet the value of the <code>IP_TTL</code> option for this socket.")