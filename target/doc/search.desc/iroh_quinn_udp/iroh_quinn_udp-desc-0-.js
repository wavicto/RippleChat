searchState.loadedDescShard("iroh_quinn_udp", 0, "Uniform interface to send and receive UDP packets with …\nNumber of UDP packets to send/receive at a time\nThe CE codepoint, signalling that congestion was …\nExplicit congestion notification codepoint\nThe ECT(0) codepoint, indicating that an endpoint is …\nThe ECT(1) codepoint, indicating that an endpoint is …\nMetadata for a single buffer filled with bytes received …\nAn outgoing packet\nA borrowed UDP socket\nTokio-compatible UDP socket with some useful …\nThe source address of the datagram(s) contained in the …\nContents of the datagram\nConstructs a value with arbitrary fields, intended to be …\nThe socket this datagram should be sent to\nThe destination IP address which was encoded in this …\nThe Explicit Congestion Notification bits for the …\nExplicit congestion notification bits to set on the packet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new object from the given bits\nThe number of segments to read when GRO is enabled. Used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bytes the associated buffer has\nThe maximum amount of segments which can be transmitted if …\nWhether transmitted datagrams might get fragmented by the …\nThe segment size if this transmission contains multiple …\nSends a <code>Transmit</code> on the given socket.\nOptional source IP address for the datagram\nThe size of a single datagram in the associated buffer\nSends a <code>Transmit</code> on the given socket without any …")