searchState.loadedDescShard("pnet_packet", 0, "Provides interfaces for interacting with packets and …\nA packet borrows its contents.\nBorrowed mutable packet data.\nUsed to convert on-the-wire packets to their #[packet] …\nMutable packet data.\nRepresents a generic, mutable, network packet.\nA packet owns its contents.\nOwned mutable packet data.\nRepresents a generic network packet.\nPacket data.\nUsed to find the calculated size of the packet. This is …\nUsed to convert a type to primitive values representing it.\nThe type of the packet to convert from.\nA tuple of types, to represent the current value.\nARP packet abstraction.\nGet packet data as a mutable slice.\nGet a slice of the packet data.\nGet packet data as a slice.\nInitialize this packet by cloning another.\nAn ethernet packet abstraction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a wire-format packet to #[packet] struct format.\nMinimal GRE Packet implementation: suitable for inspection …\nAn ICMP packet abstraction.\nAn ICMPv6 packet abstraction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the type and constants for IP next header/next …\nAn IPv4 packet abstraction.\nAn IPv6 packet abstraction.\nA length of the packet data.\nGet a length of data in the packet.\nRetrieve the underlying buffer for the packet.\nRetrieve the underlying, mutable, buffer for the packet.\nGet the calculated size of the packet.\nRetrieve the payload for the packet.\nRetrieve the mutable payload for the packet.\nA Linux cooked-mode capture (LINKTYPE_LINUX_SLL) packet …\nA Linux cooked-mode capture v2 (LINKTYPE_LINUX_SLL2) …\nA TCP packet abstraction.\nNo-op - returns <code>self</code>.\nGet an immutable version of packet data.\nConvert a value to primitive types representing it.\nA UDP packet abstraction.\nA USB PCAP packet abstraction.\nUtilities for working with packets, eg. checksumming.\nA VLAN packet abstraction.\nRepresents an ARP Packet.\nRepresents the ARP hardware types.\nThe ARP protocol hardware types.\nUsed to iterate over a slice of <code>ArpPacket</code>s\nRepresents an ARP operation.\nThe ARP protocol operations.\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nMaps from a ArpPacket to a ArpPacket while consuming the …\nMaps from a MutableArpPacket to a ArpPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the hardware_type field\nGet the value of the hardware_type field\nGet the hw_addr_len field.\nGet the hw_addr_len field.\nGet the value of the operation field\nGet the value of the operation field\nGet the proto_addr_len field.\nGet the proto_addr_len field.\nGet the value of the protocol_type field\nGet the value of the protocol_type field\nGet the value of the sender_hw_addr field\nGet the value of the sender_hw_addr field\nGet the value of the sender_proto_addr field\nGet the value of the sender_proto_addr field\nGet the value of the target_hw_addr field\nGet the value of the target_hw_addr field\nGet the value of the target_proto_addr field\nGet the value of the target_proto_addr field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>ArpOperation</code>.\nCreate a new <code>ArpHardwareType</code>.\nConstructs a new ArpPacket. If the provided buffer is less …\nConstructs a new MutableArpPacket. If the provided buffer …\nConstructs a new ArpPacket. If the provided buffer is less …\nConstructs a new MutableArpPacket. If the provided buffer …\nThe size (in bytes) of a Arp instance when converted into …\nThe size (in bytes) of a Arp instance when converted into …\nPopulates a ArpPacket using a Arp structure\nSet the value of the hardware_type field.\nSet the hw_addr_len field.\nSet the value of the operation field.\nSet the value of the payload field (copies contents)\nSet the proto_addr_len field.\nSet the value of the protocol_type field.\nSet the value of the sender_hw_addr field.\nSet the value of the sender_proto_addr field.\nSet the value of the target_hw_addr field.\nSet the value of the target_proto_addr field.\nMaps from a ArpPacket to a ArpPacket\nMaps from a MutableArpPacket to a ArpPacket\nEthernet\nARP reply\nARP request\nRepresents an DHCP Packet.\nRepresents the Dhcp hardware types.\nThe Dhcp protocol hardware types.\nUsed to iterate over a slice of <code>DhcpPacket</code>s\nRepresents an Dhcp operation.\nThe Dhcp protocol operations.\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nMaps from a DhcpPacket to a DhcpPacket while consuming the …\nMaps from a MutableDhcpPacket to a DhcpPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the chaddr field\nGet the value of the chaddr field\nGet the value of the chaddr_pad field (copies contents)\nGet the value of the chaddr_pad field (copies contents)\nGet the raw &amp;u8 value of the chaddr_pad field, without …\nGet the raw &amp;u8 value of the chaddr_pad field, without …\nGet the raw &amp;mut u8 value of the chaddr_pad field, without …\nGet the value of the ciaddr field\nGet the value of the ciaddr field\nGet the value of the file field (copies contents)\nGet the value of the file field (copies contents)\nGet the raw &amp;u8 value of the file field, without copying\nGet the raw &amp;u8 value of the file field, without copying\nGet the raw &amp;mut u8 value of the file field, without …\nGet the flags field. This field is always stored big-endian\nGet the flags field. This field is always stored big-endian\nGet the value of the giaddr field\nGet the value of the giaddr field\nGet the hlen field.\nGet the hlen field.\nGet the hops field.\nGet the hops field.\nGet the value of the htype field\nGet the value of the htype field\nGet the value of the op field\nGet the value of the op field\nGet the secs field. This field is always stored big-endian …\nGet the secs field. This field is always stored big-endian …\nGet the value of the siaddr field\nGet the value of the siaddr field\nGet the value of the sname field (copies contents)\nGet the value of the sname field (copies contents)\nGet the raw &amp;u8 value of the sname field, without copying\nGet the raw &amp;u8 value of the sname field, without copying\nGet the raw &amp;mut u8 value of the sname field, without …\nGet the xid field. This field is always stored big-endian …\nGet the xid field. This field is always stored big-endian …\nGet the value of the yiaddr field\nGet the value of the yiaddr field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>ArpOperation</code>.\nCreate a new <code>DhcpHardwareType</code>.\nConstructs a new DhcpPacket. If the provided buffer is …\nConstructs a new MutableDhcpPacket. If the provided buffer …\nConstructs a new DhcpPacket. If the provided buffer is …\nConstructs a new MutableDhcpPacket. If the provided buffer …\nThe size (in bytes) of a Dhcp instance when converted into …\nThe size (in bytes) of a Dhcp instance when converted into …\nPopulates a DhcpPacket using a Dhcp structure\nSet the value of the chaddr field.\nSet the value of the chaddr_pad field (copies contents)\nSet the value of the ciaddr field.\nSet the value of the file field (copies contents)\nSet the flags field. This field is always stored big-endian\nSet the value of the giaddr field.\nSet the hlen field.\nSet the hops field.\nSet the value of the htype field.\nSet the value of the op field.\nSet the value of the options field (copies contents)\nSet the secs field. This field is always stored big-endian …\nSet the value of the siaddr field.\nSet the value of the sname field (copies contents)\nSet the xid field. This field is always stored big-endian …\nSet the value of the yiaddr field.\nMaps from a DhcpPacket to a DhcpPacket\nMaps from a MutableDhcpPacket to a DhcpPacket\nEthernet\nDhcp reply\nDHCP request\nRepresents the <code>Ethernet::ethertype</code> field.\n<code>EtherTypes</code> are defined at: …\nRepresents an Ethernet packet.\nUsed to iterate over a slice of <code>EthernetPacket</code>s\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nMaps from a EthernetPacket to a EthernetPacket while …\nMaps from a MutableEthernetPacket to a EthernetPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the destination field\nGet the value of the destination field\nGet the value of the ethertype field\nGet the value of the ethertype field\nGet the value of the source field\nGet the value of the source field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new EthernetPacket. If the provided buffer is …\nConstructs a new MutableEthernetPacket. If the provided …\nConstruct a new <code>EtherType</code> instance.\nConstructs a new EthernetPacket. If the provided buffer is …\nConstructs a new MutableEthernetPacket. If the provided …\nThe size (in bytes) of a Ethernet instance when converted …\nThe size (in bytes) of a Ethernet instance when converted …\nPopulates a EthernetPacket using a Ethernet structure\nSet the value of the destination field.\nSet the value of the ethertype field.\nSet the value of the payload field (copies contents)\nSet the value of the source field.\nMaps from a EthernetPacket to a EthernetPacket\nMaps from a MutableEthernetPacket to a EthernetPacket\nAppleTalk Address Resolution Protocol (AARP) [Apple].\nAppleTalk - EtherTalk [Apple].\nAddress Resolution Protocol (ARP) [RFC7042].\nCFM / Y.1731 [IEEE 802.1ag].\nCobraNet [CobraNet].\nDECnet Phase IV.\nEthernet Flow Control [IEEE 802.3x].\nInternet Protocol version 4 (IPv4) [RFC7042].\nInternet Protocol version 6 (IPv6) [RFC7042].\nIPX [Xerox].\nLink Layer Discovery Protocol (LLDP) [IEEE 802.1AB].\nMPLS Unicast [RFC 3032].\nMPLS Multicast [RFC 5332].\nProvider Bridging [IEEE 802.1ad / IEEE 802.1aq].\nPPPOE Discovery Stage [RFC 2516].\nPPPoE Session Stage [RFC 2516].\nPrecision Time Protocol (PTP) over Ethernet [IEEE 1588].\nQ-in-Q Vlan Tagging [IEEE 802.1Q].\nQNX Qnet [QNX Software Systems].\nReverse Address Resolution Protocol (RARP) [RFC903].\nIETF TRILL Protocol [IEEE].\nVLAN-tagged frame (IEEE 802.1Q).\nWake on Lan.\nGRE (Generic Routing Encapsulation) Packet.\nUsed to iterate over a slice of <code>GrePacket</code>s\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\n<code>u16be</code>, but we can’t use that directly in a <code>Vec</code> :(\nUsed to iterate over a slice of <code>U16BEPacket</code>s\nA structure enabling manipulation of on the wire packets\n<code>u32be</code>, but we can’t use that directly in a <code>Vec</code> :(\nUsed to iterate over a slice of <code>U32BEPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a GrePacket to a GrePacket while consuming the …\nMaps from a MutableGrePacket to a GrePacket while …\nMaps from a U16BEPacket to a U16BEPacket while consuming …\nMaps from a MutableU16BEPacket to a U16BEPacket while …\nMaps from a U32BEPacket to a U32BEPacket while consuming …\nMaps from a MutableU32BEPacket to a U32BEPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the checksum field (copies contents)\nGet the value of the checksum field (copies contents)\nGet the value of the checksum field as iterator\nGet the value of the checksum field as iterator\nGet the checksum_present field.\nGet the checksum_present field.\nGet the raw &amp;u8 value of the checksum field, without …\nGet the raw &amp;u8 value of the checksum field, without …\nGet the raw &amp;mut u8 value of the checksum field, without …\nGet the value of the key field (copies contents)\nGet the value of the key field (copies contents)\nGet the value of the key field as iterator\nGet the value of the key field as iterator\nGet the key_present field.\nGet the key_present field.\nGet the raw &amp;u8 value of the key field, without copying\nGet the raw &amp;u8 value of the key field, without copying\nGet the raw &amp;mut u8 value of the key field, without copying\nGet the number field. This field is always stored …\nGet the number field. This field is always stored …\nGet the number field. This field is always stored …\nGet the number field. This field is always stored …\nGet the value of the offset field (copies contents)\nGet the value of the offset field (copies contents)\nGet the value of the offset field as iterator\nGet the value of the offset field as iterator\nGet the raw &amp;u8 value of the offset field, without copying\nGet the raw &amp;u8 value of the offset field, without copying\nGet the raw &amp;mut u8 value of the offset field, without …\nGet the protocol_type field. This field is always stored …\nGet the protocol_type field. This field is always stored …\nGet the recursion_control field.\nGet the recursion_control field.\nGet the value of the routing field (copies contents)\nGet the value of the routing field (copies contents)\nGet the routing_present field.\nGet the routing_present field.\nGet the raw &amp;u8 value of the routing field, without copying\nGet the raw &amp;u8 value of the routing field, without copying\nGet the raw &amp;mut u8 value of the routing field, without …\nGet the value of the sequence field (copies contents)\nGet the value of the sequence field (copies contents)\nGet the value of the sequence field as iterator\nGet the value of the sequence field as iterator\nGet the sequence_present field.\nGet the sequence_present field.\nGet the raw &amp;u8 value of the sequence field, without …\nGet the raw &amp;u8 value of the sequence field, without …\nGet the raw &amp;mut u8 value of the sequence field, without …\nGet the strict_source_route field.\nGet the strict_source_route field.\nGet the version field.\nGet the version field.\nGet the zero_flags field.\nGet the zero_flags field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new GrePacket. If the provided buffer is less …\nConstructs a new MutableGrePacket. If the provided buffer …\nConstructs a new U16BEPacket. If the provided buffer is …\nConstructs a new MutableU16BEPacket. If the provided …\nConstructs a new U32BEPacket. If the provided buffer is …\nConstructs a new MutableU32BEPacket. If the provided …\nConstructs a new GrePacket. If the provided buffer is less …\nConstructs a new MutableGrePacket. If the provided buffer …\nConstructs a new U16BEPacket. If the provided buffer is …\nConstructs a new MutableU16BEPacket. If the provided …\nConstructs a new U32BEPacket. If the provided buffer is …\nConstructs a new MutableU32BEPacket. If the provided …\nThe size (in bytes) of a Gre instance when converted into …\nThe size (in bytes) of a Gre instance when converted into …\nThe size (in bytes) of a U16BE instance when converted into\nThe size (in bytes) of a U16BE instance when converted into\nThe size (in bytes) of a U32BE instance when converted into\nThe size (in bytes) of a U32BE instance when converted into\nPopulates a GrePacket using a Gre structure\nPopulates a U16BEPacket using a U16BE structure\nPopulates a U32BEPacket using a U32BE structure\nSet the value of the checksum field (copies contents)\nSet the checksum_present field.\nSet the value of the key field (copies contents)\nSet the key_present field.\nSet the number field. This field is always stored …\nSet the number field. This field is always stored …\nSet the value of the offset field (copies contents)\nSet the value of the payload field (copies contents)\nSet the protocol_type field. This field is always stored …\nSet the recursion_control field.\nSet the value of the routing field (copies contents)\nSet the routing_present field.\nSet the value of the sequence field (copies contents)\nSet the sequence_present field.\nSet the strict_source_route field.\nSet the value of the unused field (copies contents)\nSet the value of the unused field (copies contents)\nSet the version field.\nSet the zero_flags field.\nMaps from a GrePacket to a GrePacket\nMaps from a MutableGrePacket to a GrePacket\nMaps from a U16BEPacket to a U16BEPacket\nMaps from a MutableU16BEPacket to a U16BEPacket\nMaps from a U32BEPacket to a U32BEPacket\nMaps from a MutableU32BEPacket to a U32BEPacket\nRepresents a generic ICMP packet.\nRepresents the “ICMP code” header field.\nUsed to iterate over a slice of <code>IcmpPacket</code>s\nA structure enabling manipulation of on the wire packets\nRepresents the “ICMP type” header field.\nThe enumeration of the recognized ICMP types.\nA structure enabling manipulation of on the wire packets\nCalculates a checksum of an ICMP packet.\nMaps from a IcmpPacket to a IcmpPacket while consuming the …\nMaps from a MutableIcmpPacket to a IcmpPacket while …\nabstraction for “destination unreachable” ICMP packets.\nabstraction for ICMP “echo reply” packets.\nabstraction for “echo request” ICMP packets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmp_code field\nGet the value of the icmp_code field\nGet the value of the icmp_type field\nGet the value of the icmp_type field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>IcmpType</code> instance.\nCreate a new <code>IcmpCode</code> instance.\nConstructs a new IcmpPacket. If the provided buffer is …\nConstructs a new MutableIcmpPacket. If the provided buffer …\nConstructs a new IcmpPacket. If the provided buffer is …\nConstructs a new MutableIcmpPacket. If the provided buffer …\nThe size (in bytes) of a Icmp instance when converted into …\nThe size (in bytes) of a Icmp instance when converted into …\nPopulates a IcmpPacket using a Icmp structure\nSet the checksum field. This field is always stored …\nSet the value of the icmp_code field.\nSet the value of the icmp_type field.\nSet the value of the payload field (copies contents)\nabstraction for “time exceeded” ICMP packets.\nMaps from a IcmpPacket to a IcmpPacket\nMaps from a MutableIcmpPacket to a IcmpPacket\nICMP type for “address mask reply” packet.\nICMP type for “address mask request” packet.\nICMP type for “destination unreachable” packet.\nICMP type for “echo reply” packet.\nICMP type for “echo request” packet.\nICMP type for “information reply” packet.\nICMP type for “information request” packet.\nICMP type for “parameter problem” packet.\nICMP type for “redirect message” packet.\nICMP type for “router advertisement” packet.\nICMP type for “router solicitation” packet.\nICMP type for “source quench” packet.\nICMP type for “time exceeded” packet.\nICMP type for “timestamp” packet.\nICMP type for “timestamp reply” packet.\nICMP type for “traceroute” packet.\nRepresents an “echo request” ICMP packet.\nUsed to iterate over a slice of …\nA structure enabling manipulation of on the wire packets\nEnumeration of the recognized ICMP codes for “…\nA structure enabling manipulation of on the wire packets\nMaps from a DestinationUnreachablePacket to a …\nMaps from a MutableDestinationUnreachablePacket to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmp_code field\nGet the value of the icmp_code field\nGet the value of the icmp_type field\nGet the value of the icmp_type field\nGet the unused field. This field is always stored …\nGet the unused field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new DestinationUnreachablePacket. If the …\nConstructs a new MutableDestinationUnreachablePacket. If …\nConstructs a new DestinationUnreachablePacket. If the …\nConstructs a new MutableDestinationUnreachablePacket. If …\nThe size (in bytes) of a DestinationUnreachable instance …\nThe size (in bytes) of a DestinationUnreachable instance …\nPopulates a DestinationUnreachablePacket using a …\nSet the checksum field. This field is always stored …\nSet the value of the icmp_code field.\nSet the value of the icmp_type field.\nSet the value of the payload field (copies contents)\nSet the unused field. This field is always stored …\nMaps from a DestinationUnreachablePacket to a …\nMaps from a MutableDestinationUnreachablePacket to a …\nICMP code for “communication administratively prohibited…\nICMP code for “destination host unknown” packet.\nICMP code for “destination host unreachable” packet.\nICMP code for “destination network unknown” packet.\nICMP code for “destination network unreachable” packet.\nICMP code for “destination port unreachable” packet.\nICMP code for “destination protocol unreachable” …\nICMP code for “fragmentation required and DFF flag set”…\nICMP code for “host administrative prohibited” packet.\nICMP code for “host precedence violation” packet.\nICMP code for “host unreachable for this Type Of Service…\nICMP code for “network administrative prohibited” …\nICMP code for “network unreachable for this Type Of …\nICMP code for “precedence cut off in effect” packet.\nICMP code for “source host isolated” packet.\nICMP code for “source route failed” packet.\nRepresents an ICMP echo reply packet.\nUsed to iterate over a slice of <code>EchoReplyPacket</code>s\nA structure enabling manipulation of on the wire packets\nEnumeration of available ICMP codes for ICMP echo replay …\nRepresent the “identifier” field of the ICMP echo …\nA structure enabling manipulation of on the wire packets\nRepresent the “sequence number” field of the ICMP echo …\nMaps from a EchoReplyPacket to a EchoReplyPacket while …\nMaps from a MutableEchoReplyPacket to a EchoReplyPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmp_code field\nGet the value of the icmp_code field\nGet the value of the icmp_type field\nGet the value of the icmp_type field\nGet the identifier field. This field is always stored …\nGet the identifier field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>Identifier</code> instance.\nCreate a new <code>SequenceNumber</code> instance.\nConstructs a new EchoReplyPacket. If the provided buffer …\nConstructs a new MutableEchoReplyPacket. If the provided …\nConstructs a new EchoReplyPacket. If the provided buffer …\nConstructs a new MutableEchoReplyPacket. If the provided …\nThe size (in bytes) of a EchoReply instance when converted …\nThe size (in bytes) of a EchoReply instance when converted …\nPopulates a EchoReplyPacket using a EchoReply structure\nSet the checksum field. This field is always stored …\nSet the value of the icmp_code field.\nSet the value of the icmp_type field.\nSet the identifier field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the sequence_number field. This field is always stored …\nMaps from a EchoReplyPacket to a EchoReplyPacket\nMaps from a MutableEchoReplyPacket to a EchoReplyPacket\n0 is the only available ICMP code for “echo reply” …\nRepresents an “echo request” ICMP packet.\nUsed to iterate over a slice of <code>EchoRequestPacket</code>s\nA structure enabling manipulation of on the wire packets\nEnumeration of available ICMP codes for “echo reply” …\nRepresents the identifier field.\nA structure enabling manipulation of on the wire packets\nRepresents the sequence number field.\nMaps from a EchoRequestPacket to a EchoRequestPacket while …\nMaps from a MutableEchoRequestPacket to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmp_code field\nGet the value of the icmp_code field\nGet the value of the icmp_type field\nGet the value of the icmp_type field\nGet the identifier field. This field is always stored …\nGet the identifier field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>Identifier</code> instance.\nCreate a new <code>SequenceNumber</code> instance.\nConstructs a new EchoRequestPacket. If the provided buffer …\nConstructs a new MutableEchoRequestPacket. If the provided …\nConstructs a new EchoRequestPacket. If the provided buffer …\nConstructs a new MutableEchoRequestPacket. If the provided …\nThe size (in bytes) of a EchoRequest instance when …\nThe size (in bytes) of a EchoRequest instance when …\nPopulates a EchoRequestPacket using a EchoRequest structure\nSet the checksum field. This field is always stored …\nSet the value of the icmp_code field.\nSet the value of the icmp_type field.\nSet the identifier field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the sequence_number field. This field is always stored …\nMaps from a EchoRequestPacket to a EchoRequestPacket\nMaps from a MutableEchoRequestPacket to a EchoRequestPacket\n0 is the only available ICMP code for “echo reply” …\nEnumeration of the recognized ICMP codes for “time …\nA structure enabling manipulation of on the wire packets\nRepresents an “echo request” ICMP packet.\nUsed to iterate over a slice of <code>TimeExceededPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a TimeExceededPacket to a TimeExceededPacket …\nMaps from a MutableTimeExceededPacket to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmp_code field\nGet the value of the icmp_code field\nGet the value of the icmp_type field\nGet the value of the icmp_type field\nGet the unused field. This field is always stored …\nGet the unused field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new TimeExceededPacket. If the provided …\nConstructs a new MutableTimeExceededPacket. If the …\nConstructs a new TimeExceededPacket. If the provided …\nConstructs a new MutableTimeExceededPacket. If the …\nThe size (in bytes) of a TimeExceeded instance when …\nThe size (in bytes) of a TimeExceeded instance when …\nPopulates a TimeExceededPacket using a TimeExceeded …\nSet the checksum field. This field is always stored …\nSet the value of the icmp_code field.\nSet the value of the icmp_type field.\nSet the value of the payload field (copies contents)\nSet the unused field. This field is always stored …\nMaps from a TimeExceededPacket to a TimeExceededPacket\nMaps from a MutableTimeExceededPacket to a …\nICMP code for “fragment reassembly time exceeded” …\nICMP code for “time to live exceeded in transit” …\nRepresents a generic ICMPv6 packet RFC 4443 § 2.1\nRepresents the “ICMPv6 code” header field.\nUsed to iterate over a slice of <code>Icmpv6Packet</code>s\nA structure enabling manipulation of on the wire packets\nRepresents the “ICMPv6 type” header field.\nThe enumeration of the recognized ICMPv6 types.\nA structure enabling manipulation of on the wire packets\nCalculates a checksum of an ICMPv6 packet.\nMaps from a Icmpv6Packet to a Icmpv6Packet while consuming …\nMaps from a MutableIcmpv6Packet to a Icmpv6Packet while …\nabstraction for “echo reply” ICMPv6 packets.\nabstraction for “echo request” ICMPv6 packets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nAbstractions for the Neighbor Discovery Protocol RFC 4861\nCreate a new <code>Icmpv6Type</code> instance.\nCreate a new <code>Icmpv6Code</code> instance.\nConstructs a new Icmpv6Packet. If the provided buffer is …\nConstructs a new MutableIcmpv6Packet. If the provided …\nConstructs a new Icmpv6Packet. If the provided buffer is …\nConstructs a new MutableIcmpv6Packet. If the provided …\nThe size (in bytes) of a Icmpv6 instance when converted …\nThe size (in bytes) of a Icmpv6 instance when converted …\nPopulates a Icmpv6Packet using a Icmpv6 structure\nSet the checksum field. This field is always stored …\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_type field.\nSet the value of the payload field (copies contents)\nMaps from a Icmpv6Packet to a Icmpv6Packet\nMaps from a MutableIcmpv6Packet to a Icmpv6Packet\nICMPv6 type for “destination unreachable”.\nICMPv6 type for “echo reply”.\nICMPv6 type for “echo request”.\nICMPv6 type for “neighbor advertisement”.\nICMPv6 type for “neighbor solicitation”.\nICMPv6 type for “packet too big”.\nICMPv6 type for “parameter problem”.\nICMPv6 type for “redirect”.\nICMPv6 type for “router advertisement”.\nICMPv6 type for “router solicitation”.\nICMPv6 type for “time exceeded”.\nRepresents an “echo reply” ICMPv6 packet.\nUsed to iterate over a slice of <code>EchoReplyPacket</code>s\nA structure enabling manipulation of on the wire packets\nEnumeration of available ICMPv6 codes for “echo reply” …\nRepresents the identifier field.\nA structure enabling manipulation of on the wire packets\nRepresents the sequence number field.\nMaps from a EchoReplyPacket to a EchoReplyPacket while …\nMaps from a MutableEchoReplyPacket to a EchoReplyPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the identifier field. This field is always stored …\nGet the identifier field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>Identifier</code> instance.\nCreate a new <code>SequenceNumber</code> instance.\nConstructs a new EchoReplyPacket. If the provided buffer …\nConstructs a new MutableEchoReplyPacket. If the provided …\nConstructs a new EchoReplyPacket. If the provided buffer …\nConstructs a new MutableEchoReplyPacket. If the provided …\nThe size (in bytes) of a EchoReply instance when converted …\nThe size (in bytes) of a EchoReply instance when converted …\nPopulates a EchoReplyPacket using a EchoReply structure\nSet the checksum field. This field is always stored …\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_type field.\nSet the identifier field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the sequence_number field. This field is always stored …\nMaps from a EchoReplyPacket to a EchoReplyPacket\nMaps from a MutableEchoReplyPacket to a EchoReplyPacket\n0 is the only available ICMPv6 code for “echo reply” …\nRepresents an “echo request” ICMPv6 packet.\nUsed to iterate over a slice of <code>EchoRequestPacket</code>s\nA structure enabling manipulation of on the wire packets\nEnumeration of available ICMPv6 codes for “echo reply” …\nRepresents the identifier field.\nA structure enabling manipulation of on the wire packets\nRepresents the sequence number field.\nMaps from a EchoRequestPacket to a EchoRequestPacket while …\nMaps from a MutableEchoRequestPacket to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the identifier field. This field is always stored …\nGet the identifier field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nGet the sequence_number field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>Identifier</code> instance.\nCreate a new <code>SequenceNumber</code> instance.\nConstructs a new EchoRequestPacket. If the provided buffer …\nConstructs a new MutableEchoRequestPacket. If the provided …\nConstructs a new EchoRequestPacket. If the provided buffer …\nConstructs a new MutableEchoRequestPacket. If the provided …\nThe size (in bytes) of a EchoRequest instance when …\nThe size (in bytes) of a EchoRequest instance when …\nPopulates a EchoRequestPacket using a EchoRequest structure\nSet the checksum field. This field is always stored …\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_type field.\nSet the identifier field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the sequence_number field. This field is always stored …\nMaps from a EchoRequestPacket to a EchoRequestPacket\nMaps from a MutableEchoRequestPacket to a EchoRequestPacket\n0 is the only available ICMPv6 code for “echo reply” …\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nNeighbor Discovery Option RFC 4861 § 4.6\nUsed to iterate over a slice of <code>NdpOptionPacket</code>s\nA structure enabling manipulation of on the wire packets\nRepresents a Neighbor Discovery Option Type.\nNeighbor Discovery Option Types RFC 4861 § 4.6\nNeighbor Advertisement Message Format RFC 4861 § 4.4\nEnumeration of recognized Neighbor Advert flags.\nUsed to iterate over a slice of <code>NeighborAdvertPacket</code>s\nA structure enabling manipulation of on the wire packets\nNeighbor Solicitation Message Format RFC 4861 § 4.3\nUsed to iterate over a slice of <code>NeighborSolicitPacket</code>s\nA structure enabling manipulation of on the wire packets\nRedirect Message Format RFC 4861 § 4.5\nUsed to iterate over a slice of <code>RedirectPacket</code>s\nA structure enabling manipulation of on the wire packets\nRouter Advertisement Message Format RFC 4861 § 4.2\nThe enumeration of recognized Router Advert flags.\nUsed to iterate over a slice of <code>RouterAdvertPacket</code>s\nA structure enabling manipulation of on the wire packets\nRouter Solicitation Message RFC 4861 § 4.1\nUsed to iterate over a slice of <code>RouterSolicitPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a NdpOptionPacket to a NdpOptionPacket while …\nMaps from a MutableNdpOptionPacket to a NdpOptionPacket …\nMaps from a RouterSolicitPacket to a RouterSolicitPacket …\nMaps from a MutableRouterSolicitPacket to a …\nMaps from a RouterAdvertPacket to a RouterAdvertPacket …\nMaps from a MutableRouterAdvertPacket to a …\nMaps from a NeighborSolicitPacket to a …\nMaps from a MutableNeighborSolicitPacket to a …\nMaps from a NeighborAdvertPacket to a NeighborAdvertPacket …\nMaps from a MutableNeighborAdvertPacket to a …\nMaps from a RedirectPacket to a RedirectPacket while …\nMaps from a MutableRedirectPacket to a RedirectPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the value of the dest_addr field\nGet the value of the dest_addr field\nGet the flags field.\nGet the flags field.\nGet the flags field.\nGet the flags field.\nGet the hop_limit field.\nGet the hop_limit field.\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_code field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the value of the icmpv6_type field\nGet the length field.\nGet the length field.\nGet the lifetime field. This field is always stored …\nGet the lifetime field. This field is always stored …\nGet the value of the option_type field\nGet the value of the option_type field\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;mut u8 value of the options field, without …\nGet the raw &amp;mut u8 value of the options field, without …\nGet the raw &amp;mut u8 value of the options field, without …\nGet the raw &amp;mut u8 value of the options field, without …\nGet the raw &amp;mut u8 value of the options field, without …\nGet the reachable_time field. This field is always stored …\nGet the reachable_time field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nGet the retrans_time field. This field is always stored …\nGet the retrans_time field. This field is always stored …\nGet the value of the target_addr field\nGet the value of the target_addr field\nGet the value of the target_addr field\nGet the value of the target_addr field\nGet the value of the target_addr field\nGet the value of the target_addr field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>NdpOptionType</code> instance.\nConstructs a new NdpOptionPacket. If the provided buffer …\nConstructs a new MutableNdpOptionPacket. If the provided …\nConstructs a new RouterSolicitPacket. If the provided …\nConstructs a new MutableRouterSolicitPacket. If the …\nConstructs a new RouterAdvertPacket. If the provided …\nConstructs a new MutableRouterAdvertPacket. If the …\nConstructs a new NeighborSolicitPacket. If the provided …\nConstructs a new MutableNeighborSolicitPacket. If the …\nConstructs a new NeighborAdvertPacket. If the provided …\nConstructs a new MutableNeighborAdvertPacket. If the …\nConstructs a new RedirectPacket. If the provided buffer is …\nConstructs a new MutableRedirectPacket. If the provided …\nConstructs a new NdpOptionPacket. If the provided buffer …\nConstructs a new MutableNdpOptionPacket. If the provided …\nConstructs a new RouterSolicitPacket. If the provided …\nConstructs a new MutableRouterSolicitPacket. If the …\nConstructs a new RouterAdvertPacket. If the provided …\nConstructs a new MutableRouterAdvertPacket. If the …\nConstructs a new NeighborSolicitPacket. If the provided …\nConstructs a new MutableNeighborSolicitPacket. If the …\nConstructs a new NeighborAdvertPacket. If the provided …\nConstructs a new MutableNeighborAdvertPacket. If the …\nConstructs a new RedirectPacket. If the provided buffer is …\nConstructs a new MutableRedirectPacket. If the provided …\nThe size (in bytes) of a NdpOption instance when converted …\nThe size (in bytes) of a NdpOption instance when converted …\nThe size (in bytes) of a RouterSolicit instance when …\nThe size (in bytes) of a RouterSolicit instance when …\nThe size (in bytes) of a RouterAdvert instance when …\nThe size (in bytes) of a RouterAdvert instance when …\nThe size (in bytes) of a NeighborSolicit instance when …\nThe size (in bytes) of a NeighborSolicit instance when …\nThe size (in bytes) of a NeighborAdvert instance when …\nThe size (in bytes) of a NeighborAdvert instance when …\nThe size (in bytes) of a Redirect instance when converted …\nThe size (in bytes) of a Redirect instance when converted …\nPopulates a NdpOptionPacket using a NdpOption structure\nPopulates a RouterSolicitPacket using a RouterSolicit …\nPopulates a RouterAdvertPacket using a RouterAdvert …\nPopulates a NeighborSolicitPacket using a NeighborSolicit …\nPopulates a NeighborAdvertPacket using a NeighborAdvert …\nPopulates a RedirectPacket using a Redirect structure\nSet the checksum field. This field is always stored …\nSet the checksum field. This field is always stored …\nSet the checksum field. This field is always stored …\nSet the checksum field. This field is always stored …\nSet the checksum field. This field is always stored …\nSet the value of the data field (copies contents)\nSet the value of the dest_addr field.\nSet the flags field.\nSet the flags field.\nSet the hop_limit field.\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_code field.\nSet the value of the icmpv6_type field.\nSet the value of the icmpv6_type field.\nSet the value of the icmpv6_type field.\nSet the value of the icmpv6_type field.\nSet the value of the icmpv6_type field.\nSet the length field.\nSet the lifetime field. This field is always stored …\nSet the value of the option_type field.\nSet the value of the options field (copies contents)\nSet the value of the options field (copies contents)\nSet the value of the options field (copies contents)\nSet the value of the options field (copies contents)\nSet the value of the options field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the payload field (copies contents)\nSet the reachable_time field. This field is always stored …\nSet the reserved field. This field is always stored …\nSet the reserved field. This field is always stored …\nSet the reserved field. This field is always stored …\nSet the reserved field. This field is always stored …\nSet the retrans_time field. This field is always stored …\nSet the value of the target_addr field.\nSet the value of the target_addr field.\nSet the value of the target_addr field.\nMaps from a NdpOptionPacket to a NdpOptionPacket\nMaps from a MutableNdpOptionPacket to a NdpOptionPacket\nMaps from a RouterSolicitPacket to a RouterSolicitPacket\nMaps from a MutableRouterSolicitPacket to a …\nMaps from a RouterAdvertPacket to a RouterAdvertPacket\nMaps from a MutableRouterAdvertPacket to a …\nMaps from a NeighborSolicitPacket to a …\nMaps from a MutableNeighborSolicitPacket to a …\nMaps from a NeighborAdvertPacket to a NeighborAdvertPacket\nMaps from a MutableNeighborAdvertPacket to a …\nMaps from a RedirectPacket to a RedirectPacket\nMaps from a MutableRedirectPacket to a RedirectPacket\n0 is the only available ICMPv6 Code for the NDP.\nMTU Option RFC 4861 § 4.6.4\nPrefix Information Option RFC 4861 § 4.6.2\nRedirected Header Option RFC 4861 § 4.6.3\nSource Link-Layer Address Option RFC 4861 § 4.6.1\nTarget Link-Layer Address Option RFC 4861 § 4.6.1\nIndicates that the advertisement should override an …\nIndicates that the sender is a router.\nIndicates that the advertisement was sent due to the …\n“Managed Address Configuration” flag. This is set when …\n“Other Configuration” flag. This is set when other …\nRepresents an IPv4 next level protocol, or an IPv6 next …\nProtocol numbers as defined at: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new IpNextHeaderProtocol\nActive Networks\nAuthentication Header [RFC4302]\nARGUS\nARIS\nAX.25 Frames\nBBN RCC Monitoring\nBNA\nBackroom SATNET Monitoring\nCBT\nCFTP\nChaos\nCompaq Peer Protocol\nComputer Protocol Heart Beat\nComputer Protocol Network Executive\nCombat Radio Transport Protocol\nCombat Radio User Datagram\nDatagram Congestion Control Protocol [RFC4340]\nDCN Measurement Subsystems\nDatagram Delivery Protocol\nD-II Data Exchange (DDX)\nDissimilar Gateway Protocol\nany distributed file system\nDynamic Source Routing Protocol [RFC4728]\nExterior Gateway Protocol [RFC888]\nEIGRP\nEMCON\nEncapsulation Header [RFC1241]\nEncap Security Payload [RFC4303]\nEthernet-within-IP Encapsulation [RFC3378]\nFibre Channel [RFC6172]\nGateway-to-Gateway [RFC823]\nGMTP\nGeneric Routing Encapsulation [RFC1701]\nHost Identity Protocol [RFC5201]\nHost Monitoring [RFC869]\nIPv6 Hop-by-Hop Option [RFC2460]\nany host internal protocol\nIntegrated Net Layer Security TUBA\nInteractive Agent Transfer Protocol\nInternet Control Message [RFC792]\nICMPv6 [RFC4443]\nInter-Domain Policy Routing Protocol\nIDPR Control Message Transport Proto\nInter-Domain Routing Protocol\nIpsilon Flow Management Protocol\nInternet Group Management [RFC1112]\nany private interior gateway (used by Cisco for their IGRP)\nIL Transport Protocol\nIP Payload Compression Protocol [RFC2393]\nIP-within-IP Encapsulation Protocol\nInternet Packet Core Utility\nInternet Pluribus Packet Core\nIPv4 encapsulation [RFC2003]\nIPv6 encapsulation [RFC2473]\nFragment Header for IPv6\nNo Next Header for IPv6 [RFC2460]\nDestination Options for IPv6 [RFC2460]\nRouting Header for IPv6\nIPX in IP\nInternet Reliable Transaction [RFC938]\nISO Internet Protocol\nISO Transport Protocol Class 4 [RFC905]\nKryptolan\nLayer Two Tunneling Protocol [RFC3931]\nLocus Address Resolution Protocol\nLeaf-1\nLeaf-2\nany local network\nMANET Protocols [RFC5498]\nMERIT Internodal Protocol\nMFE Network Services Protocol\nMobile Internetworking Control Pro.\nIP Mobility\n[RFC6275]\n[RFC4023]\nMulticast Transport Protocol\nMultiplexing\nNBMA Address Resolution Protocol [RFC1735]\nBulk Data Transfer Protocol [RFC969]\nNSFNET-IGP\nNetwork Voice Protocol [RFC741]\nOSPFIGP [RFC1583][RFC2328][RFC5340]\nPGM Reliable Transport Protocol\nProtocol Independent Multicast [RFC4601]\nPrivate IP Encapsulation within IP\nPNNI over IP\nany private encryption scheme\nPacket Radio Measurement\nPerformance Transparency Protocol\nPUP\nPacket Video Protocol\nQNX\nReliable Data Protocol [RFC908]\nRobust Header Compression [RFC5858]\nReservation Protocol [RFC2205][RFC3209]\n[RFC3175]\nMIT Remote Virtual Disk Protocol\nSATNET and Backroom EXPAK\nSATNET Monitoring\nSemaphore Communications Sec. Pro.\nSCPS\nStream Control Transmission Protocol\nSource Demand Routing Protocol\nSECURE-VMTP\nShim6 Protocol [RFC5533]\nSKIP\nSimple Multicast Protocol\nSimple Message Protocol\nSitara Networks Protocol\nSprite RPC Protocol\nSecure Packet Shield\nSpectraLink Radio Protocol\nStream [RFC1190][RFC1819]\nSchedule Transfer Protocol\nSUN ND PROTOCOL-Temporary\nIP with Encryption\nTCF\nTransmission Control [RFC793]\nUse for experimentation and testing [RFC3692]\nUse for experimentation and testing [RFC3692]\nThird Party Connect Protocol\nTransport Layer Security Protocol using Kryptonet key …\nTP++ Transport Protocol\nTrunk-1\nTrunk-2\nTransaction Transport Protocol/IP Traffic Manager\nUser Datagram [RFC768]\n[RFC3828]\nUTI\nVINES\nVISA Protocol\nVMTP\nVirtual Router Redundancy Protocol [RFC5798]\nWIDEBAND EXPAK\nWIDEBAND Monitoring\nWrapped Encapsulating Security Payload [RFC5840]\nWang Span Network\nCross Net Debugger\nXEROX NS IDP\nXTP\nany 0-hop protocol\nRepresents an IPv4 Packet.\nThe IPv4 header flags.\nUsed to iterate over a slice of <code>Ipv4Packet</code>s\nRepresents the IPv4 Option field.\nUsed to iterate over a slice of <code>Ipv4OptionPacket</code>s\nRepresents an IPv4 option.\nIPv4 header options numbers as defined in …\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nCalculates a checksum of an IPv4 packet header. The …\nMaps from a Ipv4Packet to a Ipv4Packet while consuming the …\nMaps from a MutableIpv4Packet to a Ipv4Packet while …\nMaps from a Ipv4OptionPacket to a Ipv4OptionPacket while …\nMaps from a MutableIpv4OptionPacket to a Ipv4OptionPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the class field.\nGet the class field.\nGet the copied field.\nGet the copied field.\nGet the value of the destination field\nGet the value of the destination field\nGet the dscp field.\nGet the dscp field.\nGet the ecn field.\nGet the ecn field.\nGet the flags field.\nGet the flags field.\nGet the fragment_offset field. This field is always stored …\nGet the fragment_offset field. This field is always stored …\nGet the header_length field.\nGet the header_length field.\nGet the identification field. This field is always stored …\nGet the identification field. This field is always stored …\nGet the value of the length field (copies contents)\nGet the value of the length field (copies contents)\nGet the raw &amp;u8 value of the length field, without copying\nGet the raw &amp;u8 value of the length field, without copying\nGet the raw &amp;mut u8 value of the length field, without …\nGet the value of the next_level_protocol field\nGet the value of the next_level_protocol field\nGet the value of the number field\nGet the value of the number field\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;mut u8 value of the options field, without …\nGet the value of the source field\nGet the value of the source field\nGet the total_length field. This field is always stored …\nGet the total_length field. This field is always stored …\nGet the ttl field.\nGet the ttl field.\nGet the version field.\nGet the version field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>Ipv4OptionNumber</code> instance.\nConstructs a new Ipv4Packet. If the provided buffer is …\nConstructs a new MutableIpv4Packet. If the provided buffer …\nConstructs a new Ipv4OptionPacket. If the provided buffer …\nConstructs a new MutableIpv4OptionPacket. If the provided …\nConstructs a new Ipv4Packet. If the provided buffer is …\nConstructs a new MutableIpv4Packet. If the provided buffer …\nConstructs a new Ipv4OptionPacket. If the provided buffer …\nConstructs a new MutableIpv4OptionPacket. If the provided …\nThe size (in bytes) of a Ipv4 instance when converted into …\nThe size (in bytes) of a Ipv4 instance when converted into …\nThe size (in bytes) of a Ipv4Option instance when …\nThe size (in bytes) of a Ipv4Option instance when …\nPopulates a Ipv4Packet using a Ipv4 structure\nPopulates a Ipv4OptionPacket using a Ipv4Option structure\nSet the checksum field. This field is always stored …\nSet the class field.\nSet the copied field.\nSet the value of the data field (copies contents)\nSet the value of the destination field.\nSet the dscp field.\nSet the ecn field.\nSet the flags field.\nSet the fragment_offset field. This field is always stored …\nSet the header_length field.\nSet the identification field. This field is always stored …\nSet the value of the length field (copies contents)\nSet the value of the next_level_protocol field.\nSet the value of the number field.\nSet the value of the options field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the source field.\nSet the total_length field. This field is always stored …\nSet the ttl field.\nSet the version field.\nMaps from a Ipv4Packet to a Ipv4Packet\nMaps from a MutableIpv4Packet to a Ipv4Packet\nMaps from a Ipv4OptionPacket to a Ipv4OptionPacket\nMaps from a MutableIpv4OptionPacket to a Ipv4OptionPacket\nDon’t Fragment flag.\nMore Fragments flag.\nAddress Extension.\nCommercial Security.\nDynamic Packet State.\nExtended Internet Protocol.\nENCODE.\nEnd of Options List.\nExtended Security.\nRFC3692-style Experiment.\nExperimental Flow Control.\nIMI Traffic Descriptor.\nLoose Source Route.\nMTU Probe.\nMTU Reply.\nNo Operation.\nQuick-Start.\nRecord Route.\nRouter Alert.\nSelective Directed Broadcast.\nSecurity.\nStream ID.\nStrict Source Route.\nTraceroute.\nTime Stamp.\nUpstream Multicast Pkt.\nExperimental Access Control.\nExperimental Measurement.\nRepresents an Destination Options.\nA structure enabling manipulation of on the wire packets.\nRepresents an IPv6 Extension.\nUsed to iterate over a slice of <code>ExtensionPacket</code>s\nA structure enabling manipulation of on the wire packets\nRepresents an IPv6 Fragment Extension.\nUsed to iterate over a slice of <code>FragmentPacket</code>s\nA structure enabling manipulation of on the wire packets\nRepresents an IPv6 Hop-by-Hop Options.\nA structure enabling manipulation of on the wire packets.\nRepresents an IPv6 Packet.\nUsed to iterate over a slice of <code>Ipv6Packet</code>s\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets.\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets.\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nRepresents an IPv6 Routing Extension.\nUsed to iterate over a slice of <code>RoutingPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a Ipv6Packet to a Ipv6Packet while consuming the …\nMaps from a MutableIpv6Packet to a Ipv6Packet while …\nMaps from a ExtensionPacket to a ExtensionPacket while …\nMaps from a MutableExtensionPacket to a ExtensionPacket …\nMaps from a RoutingPacket to a RoutingPacket while …\nMaps from a MutableRoutingPacket to a RoutingPacket while …\nMaps from a FragmentPacket to a FragmentPacket while …\nMaps from a MutableFragmentPacket to a FragmentPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the destination field\nGet the value of the destination field\nGet the flow_label field. This field is always stored …\nGet the flow_label field. This field is always stored …\nGet the fragment_offset_with_flags field. This field is …\nGet the fragment_offset_with_flags field. This field is …\nGet the hdr_ext_len field.\nGet the hdr_ext_len field.\nGet the hdr_ext_len field.\nGet the hdr_ext_len field.\nGet the hop_limit field.\nGet the hop_limit field.\nGet the id field. This field is always stored big-endian …\nGet the id field. This field is always stored big-endian …\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the value of the next_header field\nGet the payload_length field. This field is always stored …\nGet the payload_length field. This field is always stored …\nGet the reserved field.\nGet the reserved field.\nGet the routing_type field.\nGet the routing_type field.\nGet the segments_left field.\nGet the segments_left field.\nGet the value of the source field\nGet the value of the source field\nGet the traffic_class field.\nGet the traffic_class field.\nGet the version field.\nGet the version field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new Ipv6Packet. If the provided buffer is …\nConstructs a new MutableIpv6Packet. If the provided buffer …\nConstructs a new ExtensionPacket. If the provided buffer …\nConstructs a new MutableExtensionPacket. If the provided …\nConstructs a new RoutingPacket. If the provided buffer is …\nConstructs a new MutableRoutingPacket. If the provided …\nConstructs a new FragmentPacket. If the provided buffer is …\nConstructs a new MutableFragmentPacket. If the provided …\nConstructs a new Ipv6Packet. If the provided buffer is …\nConstructs a new MutableIpv6Packet. If the provided buffer …\nConstructs a new ExtensionPacket. If the provided buffer …\nConstructs a new MutableExtensionPacket. If the provided …\nConstructs a new RoutingPacket. If the provided buffer is …\nConstructs a new MutableRoutingPacket. If the provided …\nConstructs a new FragmentPacket. If the provided buffer is …\nConstructs a new MutableFragmentPacket. If the provided …\nThe size (in bytes) of a Ipv6 instance when converted into …\nThe size (in bytes) of a Ipv6 instance when converted into …\nThe size (in bytes) of a Extension instance when converted …\nThe size (in bytes) of a Extension instance when converted …\nThe size (in bytes) of a Routing instance when converted …\nThe size (in bytes) of a Routing instance when converted …\nThe size (in bytes) of a Fragment instance when converted …\nThe size (in bytes) of a Fragment instance when converted …\nPopulates a Ipv6Packet using a Ipv6 structure\nPopulates a ExtensionPacket using a Extension structure\nPopulates a RoutingPacket using a Routing structure\nPopulates a FragmentPacket using a Fragment structure\nSet the value of the data field (copies contents)\nSet the value of the destination field.\nSet the flow_label field. This field is always stored …\nSet the fragment_offset_with_flags field. This field is …\nSet the hdr_ext_len field.\nSet the hdr_ext_len field.\nSet the hop_limit field.\nSet the id field. This field is always stored big-endian …\nSet the value of the next_header field.\nSet the value of the next_header field.\nSet the value of the next_header field.\nSet the value of the next_header field.\nSet the value of the options field (copies contents)\nSet the value of the payload field (copies contents)\nSet the value of the payload field (copies contents)\nSet the payload_length field. This field is always stored …\nSet the reserved field.\nSet the routing_type field.\nSet the segments_left field.\nSet the value of the source field.\nSet the traffic_class field.\nSet the version field.\nMaps from a Ipv6Packet to a Ipv6Packet\nMaps from a MutableIpv6Packet to a Ipv6Packet\nMaps from a ExtensionPacket to a ExtensionPacket\nMaps from a MutableExtensionPacket to a ExtensionPacket\nMaps from a RoutingPacket to a RoutingPacket\nMaps from a MutableRoutingPacket to a RoutingPacket\nMaps from a FragmentPacket to a FragmentPacket\nMaps from a MutableFragmentPacket to a FragmentPacket\nA structure enabling manipulation of on the wire packets\nRepresents an SLL packet (LINKTYPE_LINUX_SLL).\nUsed to iterate over a slice of <code>SLLPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a SLLPacket to a SLLPacket while consuming the …\nMaps from a MutableSLLPacket to a SLLPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the link_layer_address field (copies …\nGet the value of the link_layer_address field (copies …\nGet the link_layer_address_len field. This field is always …\nGet the link_layer_address_len field. This field is always …\nGet the raw &amp;u8 value of the link_layer_address field, …\nGet the raw &amp;u8 value of the link_layer_address field, …\nGet the raw &amp;mut u8 value of the link_layer_address field, …\nGet the link_layer_address_type field. This field is …\nGet the link_layer_address_type field. This field is …\nGet the packet_type field. This field is always stored …\nGet the packet_type field. This field is always stored …\nGet the value of the protocol field\nGet the value of the protocol field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new SLLPacket. If the provided buffer is less …\nConstructs a new MutableSLLPacket. If the provided buffer …\nConstructs a new SLLPacket. If the provided buffer is less …\nConstructs a new MutableSLLPacket. If the provided buffer …\nThe size (in bytes) of a SLL instance when converted into …\nThe size (in bytes) of a SLL instance when converted into …\nPopulates a SLLPacket using a SLL structure\nSet the value of the link_layer_address field (copies …\nSet the link_layer_address_len field. This field is always …\nSet the link_layer_address_type field. This field is …\nSet the packet_type field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the value of the protocol field.\nMaps from a SLLPacket to a SLLPacket\nMaps from a MutableSLLPacket to a SLLPacket\nA structure enabling manipulation of on the wire packets\nRepresents an SLL2 packet (LINKTYPE_LINUX_SLL2).\nUsed to iterate over a slice of <code>SLL2Packet</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a SLL2Packet to a SLL2Packet while consuming the …\nMaps from a MutableSLL2Packet to a SLL2Packet while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the arphrd_type field. This field is always stored …\nGet the arphrd_type field. This field is always stored …\nGet the interface_index field. This field is always stored …\nGet the interface_index field. This field is always stored …\nGet the value of the link_layer_address field (copies …\nGet the value of the link_layer_address field (copies …\nGet the link_layer_address_length field.\nGet the link_layer_address_length field.\nGet the raw &amp;u8 value of the link_layer_address field, …\nGet the raw &amp;u8 value of the link_layer_address field, …\nGet the raw &amp;mut u8 value of the link_layer_address field, …\nGet the packet_type field.\nGet the packet_type field.\nGet the value of the protocol_type field\nGet the value of the protocol_type field\nGet the reserved field. This field is always stored …\nGet the reserved field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new SLL2Packet. If the provided buffer is …\nConstructs a new MutableSLL2Packet. If the provided buffer …\nConstructs a new SLL2Packet. If the provided buffer is …\nConstructs a new MutableSLL2Packet. If the provided buffer …\nThe size (in bytes) of a SLL2 instance when converted into …\nThe size (in bytes) of a SLL2 instance when converted into …\nPopulates a SLL2Packet using a SLL2 structure\nSet the arphrd_type field. This field is always stored …\nSet the interface_index field. This field is always stored …\nSet the value of the link_layer_address field (copies …\nSet the link_layer_address_length field.\nSet the packet_type field.\nSet the value of the payload field (copies contents)\nSet the value of the protocol_type field.\nSet the reserved field. This field is always stored …\nMaps from a SLL2Packet to a SLL2Packet\nMaps from a MutableSLL2Packet to a SLL2Packet\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nRepresents a TCP packet.\nThe TCP flags.\nUsed to iterate over a slice of <code>TcpPacket</code>s\nA TCP option.\nUsed to iterate over a slice of <code>TcpOptionPacket</code>s\nRepresents a TCP option.\nThe TCP header options.\nA structure enabling manipulation of on the wire packets\nA structure enabling manipulation of on the wire packets\nMaps from a TcpPacket to a TcpPacket while consuming the …\nMaps from a MutableTcpPacket to a TcpPacket while …\nMaps from a TcpOptionPacket to a TcpOptionPacket while …\nMaps from a MutableTcpOptionPacket to a TcpOptionPacket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the acknowledgement field. This field is always stored …\nGet the acknowledgement field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the data_offset field.\nGet the data_offset field.\nGet the destination field. This field is always stored …\nGet the destination field. This field is always stored …\nGet the flags field.\nGet the flags field.\nGet the value of the length field (copies contents)\nGet the value of the length field (copies contents)\nGet the raw &amp;u8 value of the length field, without copying\nGet the raw &amp;u8 value of the length field, without copying\nGet the raw &amp;mut u8 value of the length field, without …\nGet the value of the number field\nGet the value of the number field\nGet the value of the options field (copies contents)\nGet the value of the options field (copies contents)\nGet the value of the options field as iterator\nGet the value of the options field as iterator\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;u8 value of the options field, without copying\nGet the raw &amp;mut u8 value of the options field, without …\nGet the reserved field.\nGet the reserved field.\nGet the sequence field. This field is always stored …\nGet the sequence field. This field is always stored …\nGet the source field. This field is always stored …\nGet the source field. This field is always stored …\nGet the urgent_ptr field. This field is always stored …\nGet the urgent_ptr field. This field is always stored …\nGet the window field. This field is always stored …\nGet the window field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate a checksum for a packet built on IPv4.\nCalculate the checksum for a packet built on IPv4, …\nCalculate a checksum for a packet built on IPv6.\nCalculate the checksum for a packet built on IPv6, …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nMSS: The maximum segment size (MSS) is the largest amount …\nConstructs a new TcpPacket. If the provided buffer is less …\nConstructs a new MutableTcpPacket. If the provided buffer …\nCreate a new <code>TcpOptionNumber</code> instance.\nConstructs a new TcpOptionPacket. If the provided buffer …\nConstructs a new MutableTcpOptionPacket. If the provided …\nNOP: This may be used to align option fields on 32-bit …\nConstructs a new TcpPacket. If the provided buffer is less …\nConstructs a new MutableTcpPacket. If the provided buffer …\nConstructs a new TcpOptionPacket. If the provided buffer …\nConstructs a new MutableTcpOptionPacket. If the provided …\nThe size (in bytes) of a Tcp instance when converted into …\nThe size (in bytes) of a Tcp instance when converted into …\nThe size (in bytes) of a TcpOption instance when converted …\nThe size (in bytes) of a TcpOption instance when converted …\nPopulates a TcpPacket using a Tcp structure\nPopulates a TcpOptionPacket using a TcpOption structure\nSelective acknowledgment (SACK) option, defined in RFC …\nSelective acknowledgment (SACK) option, defined in RFC …\nSet the acknowledgement field. This field is always stored …\nSet the checksum field. This field is always stored …\nSet the value of the data field (copies contents)\nSet the data_offset field.\nSet the destination field. This field is always stored …\nSet the flags field.\nSet the value of the length field (copies contents)\nSet the value of the number field.\nSet the value of the options field (copies contents)\nSet the value of the payload field (copies contents)\nSet the reserved field.\nSet the sequence field. This field is always stored …\nSet the source field. This field is always stored …\nSet the urgent_ptr field. This field is always stored …\nSet the window field. This field is always stored …\nTimestamp: TCP timestamps, defined in RFC 1323, can help …\nMaps from a TcpPacket to a TcpPacket\nMaps from a MutableTcpPacket to a TcpPacket\nMaps from a TcpOptionPacket to a TcpOptionPacket\nMaps from a MutableTcpOptionPacket to a TcpOptionPacket\nWindow scale: The TCP window scale option, as defined in …\nACK – indicates that the Acknowledgment field is …\nCWR – Congestion Window Reduced (CWR) flag is set by the …\nECE – ECN-Echo has a dual role, depending on the value …\nFIN – No more data from sender.\nPSH – Push function. Asks to push the buffered data to …\nRST – Reset the connection.\nSYN – Synchronize sequence numbers. Only the first …\nURG – indicates that the Urgent pointer field is …\nEnd of Options list.\nMaximum segment size.\nNo operation.\nSelective acknowledgment.\nSelective acknowledgements permitted.\nTimestamps.\nWindow scale.\nA structure enabling manipulation of on the wire packets\nRepresents a UDP Packet.\nUsed to iterate over a slice of <code>UdpPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a UdpPacket to a UdpPacket while consuming the …\nMaps from a MutableUdpPacket to a UdpPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the checksum field. This field is always stored …\nGet the checksum field. This field is always stored …\nGet the destination field. This field is always stored …\nGet the destination field. This field is always stored …\nGet the length field. This field is always stored …\nGet the length field. This field is always stored …\nGet the source field. This field is always stored …\nGet the source field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate a checksum for a packet built on IPv4.\nCalculate a checksum for a packet built on IPv4. Advanced …\nCalculate a checksum for a packet built on IPv6.\nCalculate the checksum for a packet built on IPv6. …\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstructs a new UdpPacket. If the provided buffer is less …\nConstructs a new MutableUdpPacket. If the provided buffer …\nConstructs a new UdpPacket. If the provided buffer is less …\nConstructs a new MutableUdpPacket. If the provided buffer …\nThe size (in bytes) of a Udp instance when converted into …\nThe size (in bytes) of a Udp instance when converted into …\nPopulates a UdpPacket using a Udp structure\nSet the checksum field. This field is always stored …\nSet the destination field. This field is always stored …\nSet the length field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the source field. This field is always stored …\nMaps from a UdpPacket to a UdpPacket\nMaps from a MutableUdpPacket to a UdpPacket\nA structure enabling manipulation of on the wire packets\nRepresents a USB PCAP packet (Link Type 249).\nRepresents a USB PCAP function for the requested operation.\nUsed to iterate over a slice of <code>UsbPcapPacket</code>s\nA structure enabling manipulation of on the wire packets\nRepresents the USB status for USB requests.\nMaps from a UsbPcapPacket to a UsbPcapPacket while …\nMaps from a MutableUsbPcapPacket to a UsbPcapPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the bus field. This field is always stored …\nGet the bus field. This field is always stored …\nGet the data_length field. This field is always stored …\nGet the data_length field. This field is always stored …\nGet the device field. This field is always stored …\nGet the device field. This field is always stored …\nGet the direction field.\nGet the direction field.\nGet the endpoint field.\nGet the endpoint field.\nGet the value of the function field\nGet the value of the function field\nGet the header_length field. This field is always stored …\nGet the header_length field. This field is always stored …\nGet the value of the header_payload field (copies contents)\nGet the value of the header_payload field (copies contents)\nGet the raw &amp;u8 value of the header_payload field, without …\nGet the raw &amp;u8 value of the header_payload field, without …\nGet the raw &amp;mut u8 value of the header_payload field, …\nGet the irp_id field. This field is always stored …\nGet the irp_id field. This field is always stored …\nGet the pdo_to_fdo field.\nGet the pdo_to_fdo field.\nGet the reserved_endpoint field.\nGet the reserved_endpoint field.\nGet the reserved_info field.\nGet the reserved_info field.\nGet the value of the status field\nGet the value of the status field\nGet the transfer field.\nGet the transfer field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nConstruct a new <code>UsbPcapFunction</code> instance.\nConstruct a new <code>UsbPcapStatus</code> instance.\nConstructs a new UsbPcapPacket. If the provided buffer is …\nConstructs a new MutableUsbPcapPacket. If the provided …\nConstructs a new UsbPcapPacket. If the provided buffer is …\nConstructs a new MutableUsbPcapPacket. If the provided …\nThe size (in bytes) of a UsbPcap instance when converted …\nThe size (in bytes) of a UsbPcap instance when converted …\nPopulates a UsbPcapPacket using a UsbPcap structure\nSet the bus field. This field is always stored …\nSet the data_length field. This field is always stored …\nSet the device field. This field is always stored …\nSet the direction field.\nSet the endpoint field.\nSet the value of the function field.\nSet the header_length field. This field is always stored …\nSet the value of the header_payload field (copies contents)\nSet the irp_id field. This field is always stored …\nSet the value of the payload field (copies contents)\nSet the pdo_to_fdo field.\nSet the reserved_endpoint field.\nSet the reserved_info field.\nSet the value of the status field.\nSet the transfer field.\nMaps from a UsbPcapPacket to a UsbPcapPacket\nMaps from a MutableUsbPcapPacket to a UsbPcapPacket\nConvert a value to a byte array.\nOutput type - bytes array.\nCalculates a checksum. Used by ipv4 and icmp. The two …\nCalculate the checksum for a packet built on IPv4. Used by …\nCalculate the checksum for a packet built on IPv6.\nReturn a value as bytes (big-endian order).\nRepresents an IEEE 802.1p class of a service.\nIEEE 802.1p classes of service as defined in …\nA structure enabling manipulation of on the wire packets\nRepresents a VLAN-tagged packet.\nUsed to iterate over a slice of <code>VlanPacket</code>s\nA structure enabling manipulation of on the wire packets\nMaps from a VlanPacket to a VlanPacket while consuming the …\nMaps from a MutableVlanPacket to a VlanPacket while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the drop_eligible_indicator field.\nGet the drop_eligible_indicator field.\nGet the value of the ethertype field\nGet the value of the ethertype field\nGet the value of the priority_code_point field\nGet the value of the priority_code_point field\nGet the vlan_identifier field. This field is always stored …\nGet the vlan_identifier field. This field is always stored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum size (in bytes) a packet of this type can be. …\nThe minimum size (in bytes) a packet of this type can be. …\nCreate a new <code>ClassOfService</code> instance.\nConstructs a new VlanPacket. If the provided buffer is …\nConstructs a new MutableVlanPacket. If the provided buffer …\nConstructs a new VlanPacket. If the provided buffer is …\nConstructs a new MutableVlanPacket. If the provided buffer …\nThe size (in bytes) of a Vlan instance when converted into …\nThe size (in bytes) of a Vlan instance when converted into …\nPopulates a VlanPacket using a Vlan structure\nSet the drop_eligible_indicator field.\nSet the value of the ethertype field.\nSet the value of the payload field (copies contents)\nSet the value of the priority_code_point field.\nSet the vlan_identifier field. This field is always stored …\nMaps from a VlanPacket to a VlanPacket\nMaps from a MutableVlanPacket to a VlanPacket\nBest Effort\nBackground\nCritical Applications\nExcellent Effort\nInternetwork Control\nNetwork Control\nVideo, &lt; 100 ms latency\nVoice, &lt; 10 ms latency")