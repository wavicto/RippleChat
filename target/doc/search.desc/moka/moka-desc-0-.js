searchState.loadedDescShard("moka", 0, "Moka is a fast, concurrent cache library for Rust. Moka is …\nA snapshot of a single entry in the cache.\nThis cache does not have a necessary configuration enabled …\nThe error type for the functionalities around …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Entry</code>, returning the wrapped value.\nReturns <code>true</code> if the value in this <code>Entry</code> was not cached and …\nReturns <code>true</code> if an old value existed in the cache and was …\nReturns a reference to the wrapped key.\nCommon data types for notifications.\nCache operations.\nProvides thread-safe, concurrent cache implementations.\nReturns a reference to the wrapped value.\nThe entry’s expiration timestamp has passed.\nThe entry was manually removed by the user.\nA future returned by an eviction listener.\nIndicates the reason why a cached entry was removed.\nThe entry itself was not actually removed, but its value …\nThe entry was evicted due to size constraints.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOperations used by the <code>and_compute_with</code> and similar …\nThe result of the <code>and_compute_with</code> and similar methods.\nThe entry did not exist and was inserted. The returned …\nNo-operation. Do not modify the cached entry.\nInstructs the <code>and_compute_with</code> and similar methods how to …\nInsert or update the value of the cached entry.\nRemove the cached entry.\nThe entry already existed and was removed. The returned …\nThe entry already existed and its value was replaced with …\nThe entry did not exist and still does not exist.\nThe entry already existed and was not modified. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Some(Entry)</code> if any. Otherwise …\nUnwraps the contained <code>Entry</code>, consuming the <code>self</code> value.\nThe eviction (and admission) policy of a cache.\nCalculates when cache entries expire. A single expiration …\nThe policy of a cache.\nSpecifies that the entry should be automatically removed …\nSpecifies that the entry should be automatically removed …\nSpecifies that the entry should be automatically removed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the LRU policy.\nReturns the <code>max_capacity</code> of the cache.\nReturns the number of internal segments of the cache.\nReturns the <code>time_to_idle</code> of the cache.\nReturns the <code>time_to_live</code> of the cache.\nReturns the TinyLFU policy, which is suitable for most …\nA thread-safe concurrent synchronous in-memory cache.\nBuilds a <code>Cache</code> or <code>SegmentedCache</code> with various …\nProvides extra methods that will be useful for testing.\nIterator visiting all key-value pairs in a cache in …\nProvides advanced methods to select or insert an entry of …\nThe type of the unique ID to identify a predicate used by …\nProvides advanced methods to select or insert an entry of …\nA thread-safe concurrent in-memory cache, with multiple …\nPerforms a compute operation on a cached entry by using …\nPerforms a compute operation on a cached entry by using …\nPerforms a compute operation on a cached entry by using …\nPerforms a compute operation on a cached entry by using …\nPerforms an upsert of an <code>Entry</code> by using the given closure <code>f</code>…\nPerforms an upsert of an <code>Entry</code> by using the given closure <code>f</code>…\nBuilds a <code>SegmentedCache&lt;K, V&gt;</code>.\nBuilds a <code>Cache&lt;K, V&gt;</code>.\nBuilds a <code>Cache&lt;K, V, S&gt;</code> with the given <code>hasher</code> of type <code>S</code>.\nBuilds a <code>SegmentedCache&lt;K, V, S&gt;</code> with the given <code>hasher</code>.\nReturns a <code>CacheBuilder</code>, which can builds a <code>Cache</code> or …\nReturns a <code>CacheBuilder</code>, which can builds a <code>SegmentedCache</code> …\nMakes a clone of this shared cache.\nMakes a clone of this shared cache.\nReturns <code>true</code> if the cache contains a value for the key.\nReturns <code>true</code> if the cache contains a value for the key.\nTakes a key <code>K</code> and returns an <code>OwnedKeyEntrySelector</code> that …\nTakes a reference <code>&amp;Q</code> of a key and returns an …\nReturns an approximate number of entries in this cache.\nReturns an approximate number of entries in this cache.\nSets the eviction listener closure to the cache.\nSets the eviction (and admission) policy of the cache.\nSets the given <code>expiry</code> to the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <em>clone</em> of the value corresponding to the key.\nReturns a <em>clone</em> of the value corresponding to the key.\nTODO: Remove this in v0.13.0. Deprecated, replaced with …\nTODO: Remove this in v0.13.0. Deprecated, replaced with …\nReturns a <em>clone</em> of the value corresponding to the key. If …\nReturns a <em>clone</em> of the value corresponding to the key. If …\nSimilar to <code>get_with</code>, but instead of passing an owned key, …\nSimilar to <code>get_with</code>, but instead of passing an owned key, …\nTODO: Remove this in v0.13.0. Deprecated, replaced with …\nWorks like <code>get_with</code>, but takes an additional <code>replace_if</code> …\nSets the initial capacity (number of entries) of the cache.\nInserts a key-value pair into the cache.\nInserts a key-value pair into the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiscards any cached value for the key.\nDiscards any cached value for the key.\nDiscards all cached values.\nDiscards all cached values.\nDiscards cached values that satisfy a predicate.\nDiscards cached values that satisfy a predicate.\nCreates an iterator visiting all key-value pairs in …\nCreates an iterator visiting all key-value pairs in …\nSets the max capacity of the cache.\nSets the name of the cache. Currently the name is used for …\nReturns cache’s name.\nReturns cache’s name.\nConstruct a new <code>CacheBuilder</code> that will be used to build a …\nConstructs a new <code>Cache&lt;K, V&gt;</code> that will store up to the …\nConstructs a new <code>SegmentedCache&lt;K, V&gt;</code> that has multiple …\nReturns a <em>clone</em> of the value corresponding to the key. If …\nReturns a <em>clone</em> of the value corresponding to the key. If …\nSimilar to <code>optionally_get_with</code>, but instead of passing an …\nSimilar to <code>optionally_get_with</code>, but instead of passing an …\nReturns the corresponding <code>Entry</code> for the key given when …\nReturns the corresponding <code>Entry</code> for the reference of the …\nReturns the corresponding <code>Entry</code> for the key given when …\nReturns the corresponding <code>Entry</code> for the reference of the …\nReturns the corresponding <code>Entry</code> for the key given when …\nReturns the corresponding <code>Entry</code> for the reference of the …\nWorks like <code>or_insert_with</code>, but takes an additional …\nWorks like <code>or_insert_with</code>, but takes an additional …\nReturns the corresponding <code>Entry</code> for the key given when …\nReturns the corresponding <code>Entry</code> for the reference of the …\nReturns the corresponding <code>Entry</code> for the key given when …\nReturns the corresponding <code>Entry</code> for the reference of the …\nReturns a read-only cache policy of this cache.\nReturns a read-only cache policy of this cache.\nDiscards any cached value for the key and returns a <em>clone</em> …\nDiscards any cached value for the key and returns a clone …\nPerforms any pending maintenance operations needed by the …\nPerforms any pending maintenance operations needed by the …\nSets the number of segments of the cache.\nEnables support for <code>Cache::invalidate_entries_if</code> method.\nPerforms any pending maintenance operations needed by the …\nSets the time to idle of the cache.\nSets the time to live of the cache.\nReturns a <em>clone</em> of the value corresponding to the key. If …\nReturns a <em>clone</em> of the value corresponding to the key. If …\nSimilar to <code>try_get_with</code>, but instead of passing an owned …\nSimilar to <code>try_get_with</code>, but instead of passing an owned …\nSets the weigher closure to the cache.\nReturns an approximate total weighted size of entries in …\nReturns an approximate total weighted size of entries in …")