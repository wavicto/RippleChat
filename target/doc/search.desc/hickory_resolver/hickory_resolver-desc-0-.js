searchState.loadedDescShard("hickory_resolver", 0, "The Resolver is responsible for performing recursive …\nConfiguration for the local hosts file\nConversion into a Name\nMaximum legal length of a domain name\nAn error with an arbitrary message, referenced as &amp;’…\nAn error with an arbitrary message, stored as String\nA domain name\nAn error got returned by the hickory-proto crate\nThe error type for errors that get returned in the crate\nThe error kind for errors that get returned in the crate\nAn asynchronous resolver for DNS generic over async …\nA builder to construct a <code>Resolver</code>.\nA Resolver used with Tokio\nAppends the <code>domain</code> to <code>self</code>, making the new <code>Name</code> an FQDN\nAppends the label to the end of this name\nAppends <code>other</code> to <code>self</code>, returning a new <code>Name</code>\nTrims off the first part of the name, to help with …\nConstruct the resolver.\nConstructs a new <code>Resolver</code> via <code>ResolverBuilder</code> with the …\nConstructs a new Tokio based Resolver with the system …\nConstructs a new Tokio based Resolver with the system …\nConstruct a new <code>Resolver</code> via <code>ResolverBuilder</code> with the …\nCaching related functionality for the Resolver.\nPerforms a lookup for the associated type.\nFlushes/Removes all entries from the cache\nCase insensitive comparison, see <code>Name::cmp_case</code> for case …\nCase sensitive comparison\nConfiguration for a resolver\nRead the config for this resolver.\nAn LRU cache designed for work with DNS lookups\nEmits the canonical version of the name to the encoder.\nWrites the labels, as lower case, to the encoder\nCompares the Names, in a case sensitive manner\nNon-FQDN-aware case-insensitive comparison\nNon-FQDN-aware case-sensitive comparison\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWill convert the string to a name only allowing ascii as …\nCreates a new Name from the specified labels\nUses the Name::from_utf8 conversion on this string, see …\nFirst attempts to decode via <code>from_utf8</code>, if that fails IDNA …\nCreates a new configuration from the system hosts file, …\nWill convert the string to a name using IDNA, punycode, to …\nInsert a new Lookup for the associated <code>Name</code> and <code>RecordType</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the kind of the error\nConvert this into Name\nReturns the SOA record, if the error contains one\nConverts a name to a wildcard, by replacing the first …\nPerforms a lookup for the associated type.\nPerforms a lookup for the associated type.\nReturns whether the length of the labels, in bytes is 0. …\nReturns true if the name is a fully qualified domain name.\nReturns true if the <code>Name</code> is either localhost or in the …\nReturns true if no records were returned\nReturns true if the domain does not exist\nReturns true if there are no labels, i.e. it’s empty.\nTrue if the first label of this name is the wildcard, i.e. …\nReturns an iterator over the labels\nGet the kind of the error\nreturns the length in bytes of the labels. ‘.’ counts …\nLookup result from a resolution of ipv4 and ipv6 records …\nGeneric lookup for any RecordType\nLookupIp result from a resolution of ipv4 and ipv6 records …\nPerforms a dual-stack DNS lookup for the IP for the given …\nLook up the addresses for the given host from the system …\nPerforms a lookup for the associated type.\nA module with associated items for working with nameservers\nCreate a new domain::Name, i.e. label\nPerforms a lookup for the associated type.\nReturns the number of labels in the name, discounting <code>*</code>.\nRead the options for this resolver.\nReturns a mutable reference to the <code>ResolverOpts</code>.\nattempts to parse a name such as <code>&quot;example.com.&quot;</code> or …\nConverts a *.arpa Name in a PTR record back into an IpNet …\nPrepends the label to the beginning of this name\nIf this is an underlying proto error, return that\nRandomize the case of ASCII alpha characters in a name\nparses the chain of labels this has a max of 255 octets, …\nparse configuration from <code>src</code>\nPerforms a lookup for the associated type.\nReturns the root label, i.e. no labels, can probably make …\nSpecifies this name is a fully qualified domain name\nCustomizes the static hosts used in this resolver.\nPerforms a lookup for the associated type.\nPerforms a lookup for the associated type.\nSystem configuration loading\nPerforms a lookup for the associated type.\nConverts this name into an ascii safe string.\nCheck if this value is a valid IP address\nCreates a new Name with all labels lowercased\nConverts the Name labels to the utf8 String form.\nTrims to the number of labels specified\nPerforms a lookup for the associated type.\nreturns a version as specified in Cargo.toml\nSets the <code>ResolverOpts</code> to be used by the resolver.\nreturns true if the name components of self are all …\nsame as <code>zone_of</code> allows for case sensitive call\nAlways attempt to look up IP addresses from the system …\nUse local resolver configurations only when this resolver …\nIP addresses for Cloudflare’s 1.1.1.1 DNS service\nIP addresses for Google Public DNS\nQuery for A and AAAA in parallel\nOnly query for A (Ipv4) records\nQuery for Ipv4 if that fails, query for Ipv6 (default)\nOnly query for AAAA (Ipv6) records\nQuery for Ipv6 if that fails, query for Ipv4\nThe lookup ip strategy\nConfiguration for the NameServer\nA set of name_servers to associate with a <code>ResolverConfig</code>.\nThe DNS will always be queried.\nIP address for the Quad9 DNS service\nServers are ordered based on collected query statistics. …\nWhether the system hosts file should be respected by the …\nConfiguration for the upstream nameservers to use for …\nConfiguration for the Resolver\nThe order of servers is rotated in a round-robin fashion. …\nThe strategy for establishing the query order of name …\nThe order provided to the resolver is used. The ordering …\nAdd the configuration for a name server\nAdd a search domain\nAppend nameservers to a NameServerConfigGroup.\nNumber of retries after lookup failure before giving up. …\nLocal UDP ports to avoid when making outgoing queries\nThe client address (IP and port) to use for connecting to …\nCache size is in number of records (some records can be …\nEnable case randomization.\nValidate the names in the response, not implemented don’…\nCreates a default configuration, using <code>1.1.1.1</code>, <code>1.0.0.1</code> …\nCreates a default configuration, using <code>1.1.1.1</code>, <code>1.0.0.1</code> …\nCreates a default configuration, using <code>8.8.8.8</code>, <code>8.8.4.4</code> …\nReturns <code>LookupIpStrategy::Ipv4thenIpv6</code> as the default.\nReturns <code>ServerOrderingStrategy::QueryStatistics</code> as the …\nDefault values for the Resolver configuration.\nReturns the local domain\nEnable edns, for larger records\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure a NameServer address and port\nCreate a ResolverConfig with all parts specified\nCreates a default configuration, using <code>8.8.8.8</code>, <code>8.8.4.4</code> …\nCreates a default configuration, using <code>8.8.8.8</code>, <code>8.8.4.4</code> …\nThe HTTP endpoint where the DNS NameServer provides …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner vec of configs\nThe ip_strategy for the Resolver to use when lookup Ipv4 …\nMerges this set of <code>NameServerConfig</code>s with the other\nReturns a reference to the name servers\nSets the number of dots that must appear (unless it’s a …\nOptional maximum TTL for negative (<code>NXDOMAIN</code>) responses.\nOptional minimum TTL for negative (<code>NXDOMAIN</code>) responses.\nCreates a new empty configuration\nConstructs a Nameserver configuration with some basic …\nCreates a new <code>NameServerConfigGroup</code> with a default size of …\nNumber of concurrent requests per query\nRequest UDP bind ephemeral ports directly from the OS\nOptional maximum TTL for positive responses.\nOptional minimum TTL for positive responses.\nPreserve all intermediate records in the lookup response, …\nThe protocol to use when communicating with the NameServer.\nCreates a configuration, using <code>9.9.9.9</code>, <code>149.112.112.112</code> …\nCreates a configuration, using <code>9.9.9.9</code>, <code>149.112.112.112</code> …\nRequest upstream recursive resolvers to not perform any …\nReturns the search domains\nThe server ordering strategy that the resolver should use.\nSet the domain of the entity querying results.\nThe address which the DNS NameServer is registered at.\nSpecify the timeout for a request. Defaults to 5 seconds\nSPKI name, only relevant for TLS connections\nPath to a DNSSEC trust anchor file.\nWhether to trust <code>NXDOMAIN</code> responses from upstream …\nTry queries over TCP if they fail over UDP.\nCheck /etc/hosts file before dns requery (only works for …\nUse DNSSEC to validate the request\nSets the client address (IP and port) to connect from on …\nCreates a new <code>NameServiceConfigGroup</code> with the specified …\nA cache specifically for storing DNS records.\nMinimum and maximum TTL values for positive and negative …\nThe time-to-live (TTL) configuration used by the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct the LRU’s TTL configuration based on the …\nBased on the query, see if there are any records available\ninserts a record based on the name and type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the minimum and maximum TTL values for negative …\nConstruct a new cache\nCreates a new cache TTL configuration.\nRetrieves the minimum and maximum TTL values for positive …\nOverride the minimum and maximum TTL values for a specific …\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nResult of a DNS query when querying for any record type …\nBorrowed view of set of <code>RData</code>s returned from a <code>Lookup</code>.\nBorrowed view of set of <code>RData</code>s returned from a Lookup\nBorrowed view of set of <code>Record</code>s returned from a Lookup\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nThe result of an SRV lookup\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nContains the results of a lookup for the associated …\nBorrowed view of set of RDatas returned from a Lookup\nAn iterator over the Lookup type\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nReturn a reference to the inner lookup\nAdd new records to this lookup, without creating a new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn new instance with given rdata and the maximum TTL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nThis is not a free conversion, because the <code>RData</code>s are …\nReturns the list of IPs associated with the SRV record.\nReturns an iterator over the data of all records returned …\nReturns an iterator over the SRV RData\nReturns an iterator over the records that match RData::PTR\nReturns an iterator over the records that match RData::A\nReturns an iterator over the records that match RData::AAAA\nReturns an iterator over the records that match RData::MX\nReturns an iterator over the records that match RData::TLSA\nReturns an iterator over the records that match RData::TXT\nReturns an iterator over the records that match RData::CERT\nReturns an iterator over the records that match RData::SOA\nReturns an iterator over the records that match RData::NS\nReturn a new instance with the given records and deadline.\nReturn new instance with given records and the maximum TTL.\nReturns a reference to the <code>Query</code> that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns a reference to the Query that was used to produce …\nReturns an iterator over all records returned during the …\nReturns an slice over all records that were returned …\nReturns the <code>Instant</code> at which this <code>Lookup</code> is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nReturns the <code>Instant</code> at which this result is no longer …\nResult of a DNS query when querying for A or AAAA records.\nThe Future returned from crate::Resolver when performing …\nBorrowed view of set of RDatas returned from a Lookup\nBorrowed view of set of IPs returned from a LookupIp\nReturn a reference to the inner lookup\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is not a free conversion, because the <code>RData</code>s are …\nReturns an iterator over the response records.\nPerform a lookup from a hostname to a set of IPs\nReturns a reference to the <code>Query</code> that was used to produce …\nReturns the <code>Instant</code> at which this lookup is no longer …\nThe handle to the connection for sending DNS requests.\nCreate <code>DnsHandle</code> with the help of <code>RuntimeProvider</code>. This …\nThs future is responsible for spawning any background …\nA connected DNS handle\nDefault connector for <code>GenericConnection</code>\nSpecifies the details of a remote NameServer used for …\nA pool of NameServers\nThis struct is used to create <code>DnsHandle</code> with the help of <code>P</code>.\nAbstract interface for mocking purpose\nProvider that handles the underlying I/O and timing.\nDefault ConnectionProvider with <code>GenericConnection</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a NameServerPool from a set of name server …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance.\nConstruct a new Nameserver with the configuration and …\nCreate a new connection.\nReturns the pool’s options.\nSpecifies that this NameServer will treat negative …")