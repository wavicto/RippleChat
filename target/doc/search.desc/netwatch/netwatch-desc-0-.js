searchState.loadedDescShard("netwatch", 0, "Networking related utilities\nIp family selection between Ipv4 and Ipv6.\nWrapper around a tokio UDP socket.\nIpv4\nIpv6\nBind to the given port and listen on all interfaces.\nBind to any provided <code>SocketAddr</code>.\nBind to the given port only on localhost.\nBind only Ipv4 on localhost.\nBind only Ipv6 on localhost.\nBind only Ipv4 on any interface.\nBind only Ipv6 on any interface.\nCloses the socket, and waits for the underlying <code>libc::close</code>…\nConnects the UDP socket setting the default destination …\nCreates a <code>UdpSender</code> sender.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of segments to read when GRO is enabled. Used …\nContains helpers for looking up system network interfaces.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIP address related utilities.\nIs the socket broken and needs a rebind?\nCheck if this socket is closed.\nReturns the matching localhost address.\nReturns the local address of this socket.\nThe maximum amount of segments which can be transmitted if …\nWhether transmitted datagrams might get fragmented by the …\nMonitoring of networking interfaces and route changes.\nquinn based <code>poll_recv</code>\nPoll send\npoll send a quinn based <code>Transmit</code>.\nPoll for writable\nRebind the underlying socket.\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket. On …\nSends data on the socket to the remote address that the …\nAsync sending\nSends data on the socket to the given address. On success, …\nBest effort sending\nSend a quinn based <code>Transmit</code>.\nReturns the matching default address.\nThe details about a default route.\nLikely IPs of the residentla router, and the ip address of …\nRepresents a network interface.\nStructure of an IP network, either IPv4 or IPv6.\nIntended to store the state of the machine’s network …\nStructure of IPv4 Network.\nStructure of IPv6 Network.\nThe IP address of this structure.\nA list of all ip addresses of this interface.\nLike <code>DefaultRoutDetails::new</code> but only returns the …\nThe interface name for the machine’s default route.\nCreates a fake interface state for usage in tests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIp of the router.\nWhether the machine has some non-localhost, non-link-local …\nWhether this machine has an IPv6 Global or Unique Local …\nThe interface name. It’s like “eth0” (Linux), “…\nMaps from an interface name interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the current network interface is considered “…\nIs this a major change compared to the <code>old</code> one?.\nIs this interface up?\nList of machine’s local IP addresses.\nOur local Ip if known.\nThe name of the interface.\nReturns the state of all the current machine’s network …\nReads the default route from the current system and …\nReturns the likely IP of the residential router, which …\nList of machine’s IP addresses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the address is a unicast address with …\nLoopback addresses.\nReturns the machine’s IP addresses. If there are no …\nRegular addresses.\nMonitors networking interface and route changes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSubscribe to network changes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPotential change detected outside\nCreate a new monitor.")